# coding: utf-8

"""
    Orders

    API operations for managing orders as well as refunds and incidents as they relate to the order  # noqa: E501

    OpenAPI spec version: suppliers-v1
    Contact: MarketplaceAPISupport@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderIncident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'reason_open_code': 'str',
        'reason_close_code': 'str',
        'reason_open_label': 'str',
        'reason_close_label': 'str',
        'incident_state': 'str',
        'incident_opened_date': 'datetime',
        'incident_closed_date': 'datetime',
        'incident_disputed_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'reason_open_code': 'reasonOpenCode',
        'reason_close_code': 'reasonCloseCode',
        'reason_open_label': 'reasonOpenLabel',
        'reason_close_label': 'reasonCloseLabel',
        'incident_state': 'incidentState',
        'incident_opened_date': 'incidentOpenedDate',
        'incident_closed_date': 'incidentClosedDate',
        'incident_disputed_date': 'incidentDisputedDate'
    }

    def __init__(self, id=None, reason_open_code=None, reason_close_code=None, reason_open_label=None, reason_close_label=None, incident_state=None, incident_opened_date=None, incident_closed_date=None, incident_disputed_date=None):  # noqa: E501
        """OrderIncident - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._reason_open_code = None
        self._reason_close_code = None
        self._reason_open_label = None
        self._reason_close_label = None
        self._incident_state = None
        self._incident_opened_date = None
        self._incident_closed_date = None
        self._incident_disputed_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if reason_open_code is not None:
            self.reason_open_code = reason_open_code
        if reason_close_code is not None:
            self.reason_close_code = reason_close_code
        if reason_open_label is not None:
            self.reason_open_label = reason_open_label
        if reason_close_label is not None:
            self.reason_close_label = reason_close_label
        if incident_state is not None:
            self.incident_state = incident_state
        if incident_opened_date is not None:
            self.incident_opened_date = incident_opened_date
        if incident_closed_date is not None:
            self.incident_closed_date = incident_closed_date
        if incident_disputed_date is not None:
            self.incident_disputed_date = incident_disputed_date

    @property
    def id(self):
        """Gets the id of this OrderIncident.  # noqa: E501


        :return: The id of this OrderIncident.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderIncident.


        :param id: The id of this OrderIncident.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def reason_open_code(self):
        """Gets the reason_open_code of this OrderIncident.  # noqa: E501


        :return: The reason_open_code of this OrderIncident.  # noqa: E501
        :rtype: str
        """
        return self._reason_open_code

    @reason_open_code.setter
    def reason_open_code(self, reason_open_code):
        """Sets the reason_open_code of this OrderIncident.


        :param reason_open_code: The reason_open_code of this OrderIncident.  # noqa: E501
        :type: str
        """

        self._reason_open_code = reason_open_code

    @property
    def reason_close_code(self):
        """Gets the reason_close_code of this OrderIncident.  # noqa: E501


        :return: The reason_close_code of this OrderIncident.  # noqa: E501
        :rtype: str
        """
        return self._reason_close_code

    @reason_close_code.setter
    def reason_close_code(self, reason_close_code):
        """Sets the reason_close_code of this OrderIncident.


        :param reason_close_code: The reason_close_code of this OrderIncident.  # noqa: E501
        :type: str
        """

        self._reason_close_code = reason_close_code

    @property
    def reason_open_label(self):
        """Gets the reason_open_label of this OrderIncident.  # noqa: E501


        :return: The reason_open_label of this OrderIncident.  # noqa: E501
        :rtype: str
        """
        return self._reason_open_label

    @reason_open_label.setter
    def reason_open_label(self, reason_open_label):
        """Sets the reason_open_label of this OrderIncident.


        :param reason_open_label: The reason_open_label of this OrderIncident.  # noqa: E501
        :type: str
        """

        self._reason_open_label = reason_open_label

    @property
    def reason_close_label(self):
        """Gets the reason_close_label of this OrderIncident.  # noqa: E501


        :return: The reason_close_label of this OrderIncident.  # noqa: E501
        :rtype: str
        """
        return self._reason_close_label

    @reason_close_label.setter
    def reason_close_label(self, reason_close_label):
        """Sets the reason_close_label of this OrderIncident.


        :param reason_close_label: The reason_close_label of this OrderIncident.  # noqa: E501
        :type: str
        """

        self._reason_close_label = reason_close_label

    @property
    def incident_state(self):
        """Gets the incident_state of this OrderIncident.  # noqa: E501


        :return: The incident_state of this OrderIncident.  # noqa: E501
        :rtype: str
        """
        return self._incident_state

    @incident_state.setter
    def incident_state(self, incident_state):
        """Sets the incident_state of this OrderIncident.


        :param incident_state: The incident_state of this OrderIncident.  # noqa: E501
        :type: str
        """
        allowed_values = ["IncidentOpen", "IncidentClosed", "IncidentDisputed"]  # noqa: E501
        if incident_state not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_state` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_state, allowed_values)
            )

        self._incident_state = incident_state

    @property
    def incident_opened_date(self):
        """Gets the incident_opened_date of this OrderIncident.  # noqa: E501


        :return: The incident_opened_date of this OrderIncident.  # noqa: E501
        :rtype: datetime
        """
        return self._incident_opened_date

    @incident_opened_date.setter
    def incident_opened_date(self, incident_opened_date):
        """Sets the incident_opened_date of this OrderIncident.


        :param incident_opened_date: The incident_opened_date of this OrderIncident.  # noqa: E501
        :type: datetime
        """

        self._incident_opened_date = incident_opened_date

    @property
    def incident_closed_date(self):
        """Gets the incident_closed_date of this OrderIncident.  # noqa: E501


        :return: The incident_closed_date of this OrderIncident.  # noqa: E501
        :rtype: datetime
        """
        return self._incident_closed_date

    @incident_closed_date.setter
    def incident_closed_date(self, incident_closed_date):
        """Sets the incident_closed_date of this OrderIncident.


        :param incident_closed_date: The incident_closed_date of this OrderIncident.  # noqa: E501
        :type: datetime
        """

        self._incident_closed_date = incident_closed_date

    @property
    def incident_disputed_date(self):
        """Gets the incident_disputed_date of this OrderIncident.  # noqa: E501


        :return: The incident_disputed_date of this OrderIncident.  # noqa: E501
        :rtype: datetime
        """
        return self._incident_disputed_date

    @incident_disputed_date.setter
    def incident_disputed_date(self, incident_disputed_date):
        """Sets the incident_disputed_date of this OrderIncident.


        :param incident_disputed_date: The incident_disputed_date of this OrderIncident.  # noqa: E501
        :type: datetime
        """

        self._incident_disputed_date = incident_disputed_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderIncident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderIncident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
