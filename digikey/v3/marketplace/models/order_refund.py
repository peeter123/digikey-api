# coding: utf-8

"""
    Orders

    API operations for managing orders as well as refunds and incidents as they relate to the order  # noqa: E501

    OpenAPI spec version: suppliers-v1
    Contact: MarketplaceAPISupport@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderRefund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'legacy_id': 'int',
        'business_order_id': 'str',
        'order_id': 'str',
        'shipping_amount': 'float',
        'refund_state': 'str',
        'transaction_number': 'str',
        'create_date_utc': 'datetime',
        'transaction_date_utc': 'datetime',
        'refund_items': 'list[OrderRefundItem]',
        'shipping_reason_code': 'str',
        'shipping_reason_label': 'str'
    }

    attribute_map = {
        'id': 'id',
        'legacy_id': 'legacyId',
        'business_order_id': 'businessOrderId',
        'order_id': 'orderId',
        'shipping_amount': 'shippingAmount',
        'refund_state': 'refundState',
        'transaction_number': 'transactionNumber',
        'create_date_utc': 'createDateUtc',
        'transaction_date_utc': 'transactionDateUtc',
        'refund_items': 'refundItems',
        'shipping_reason_code': 'shippingReasonCode',
        'shipping_reason_label': 'shippingReasonLabel'
    }

    def __init__(self, id=None, legacy_id=None, business_order_id=None, order_id=None, shipping_amount=None, refund_state=None, transaction_number=None, create_date_utc=None, transaction_date_utc=None, refund_items=None, shipping_reason_code=None, shipping_reason_label=None):  # noqa: E501
        """OrderRefund - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._legacy_id = None
        self._business_order_id = None
        self._order_id = None
        self._shipping_amount = None
        self._refund_state = None
        self._transaction_number = None
        self._create_date_utc = None
        self._transaction_date_utc = None
        self._refund_items = None
        self._shipping_reason_code = None
        self._shipping_reason_label = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if legacy_id is not None:
            self.legacy_id = legacy_id
        if business_order_id is not None:
            self.business_order_id = business_order_id
        if order_id is not None:
            self.order_id = order_id
        if shipping_amount is not None:
            self.shipping_amount = shipping_amount
        if refund_state is not None:
            self.refund_state = refund_state
        if transaction_number is not None:
            self.transaction_number = transaction_number
        if create_date_utc is not None:
            self.create_date_utc = create_date_utc
        if transaction_date_utc is not None:
            self.transaction_date_utc = transaction_date_utc
        if refund_items is not None:
            self.refund_items = refund_items
        if shipping_reason_code is not None:
            self.shipping_reason_code = shipping_reason_code
        if shipping_reason_label is not None:
            self.shipping_reason_label = shipping_reason_label

    @property
    def id(self):
        """Gets the id of this OrderRefund.  # noqa: E501


        :return: The id of this OrderRefund.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderRefund.


        :param id: The id of this OrderRefund.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def legacy_id(self):
        """Gets the legacy_id of this OrderRefund.  # noqa: E501


        :return: The legacy_id of this OrderRefund.  # noqa: E501
        :rtype: int
        """
        return self._legacy_id

    @legacy_id.setter
    def legacy_id(self, legacy_id):
        """Sets the legacy_id of this OrderRefund.


        :param legacy_id: The legacy_id of this OrderRefund.  # noqa: E501
        :type: int
        """

        self._legacy_id = legacy_id

    @property
    def business_order_id(self):
        """Gets the business_order_id of this OrderRefund.  # noqa: E501


        :return: The business_order_id of this OrderRefund.  # noqa: E501
        :rtype: str
        """
        return self._business_order_id

    @business_order_id.setter
    def business_order_id(self, business_order_id):
        """Sets the business_order_id of this OrderRefund.


        :param business_order_id: The business_order_id of this OrderRefund.  # noqa: E501
        :type: str
        """

        self._business_order_id = business_order_id

    @property
    def order_id(self):
        """Gets the order_id of this OrderRefund.  # noqa: E501


        :return: The order_id of this OrderRefund.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderRefund.


        :param order_id: The order_id of this OrderRefund.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def shipping_amount(self):
        """Gets the shipping_amount of this OrderRefund.  # noqa: E501


        :return: The shipping_amount of this OrderRefund.  # noqa: E501
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """Sets the shipping_amount of this OrderRefund.


        :param shipping_amount: The shipping_amount of this OrderRefund.  # noqa: E501
        :type: float
        """

        self._shipping_amount = shipping_amount

    @property
    def refund_state(self):
        """Gets the refund_state of this OrderRefund.  # noqa: E501


        :return: The refund_state of this OrderRefund.  # noqa: E501
        :rtype: str
        """
        return self._refund_state

    @refund_state.setter
    def refund_state(self, refund_state):
        """Sets the refund_state of this OrderRefund.


        :param refund_state: The refund_state of this OrderRefund.  # noqa: E501
        :type: str
        """
        allowed_values = ["WaitingRefund", "Refunded", "Refused"]  # noqa: E501
        if refund_state not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_state` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_state, allowed_values)
            )

        self._refund_state = refund_state

    @property
    def transaction_number(self):
        """Gets the transaction_number of this OrderRefund.  # noqa: E501


        :return: The transaction_number of this OrderRefund.  # noqa: E501
        :rtype: str
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """Sets the transaction_number of this OrderRefund.


        :param transaction_number: The transaction_number of this OrderRefund.  # noqa: E501
        :type: str
        """

        self._transaction_number = transaction_number

    @property
    def create_date_utc(self):
        """Gets the create_date_utc of this OrderRefund.  # noqa: E501


        :return: The create_date_utc of this OrderRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date_utc

    @create_date_utc.setter
    def create_date_utc(self, create_date_utc):
        """Sets the create_date_utc of this OrderRefund.


        :param create_date_utc: The create_date_utc of this OrderRefund.  # noqa: E501
        :type: datetime
        """

        self._create_date_utc = create_date_utc

    @property
    def transaction_date_utc(self):
        """Gets the transaction_date_utc of this OrderRefund.  # noqa: E501


        :return: The transaction_date_utc of this OrderRefund.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_date_utc

    @transaction_date_utc.setter
    def transaction_date_utc(self, transaction_date_utc):
        """Sets the transaction_date_utc of this OrderRefund.


        :param transaction_date_utc: The transaction_date_utc of this OrderRefund.  # noqa: E501
        :type: datetime
        """

        self._transaction_date_utc = transaction_date_utc

    @property
    def refund_items(self):
        """Gets the refund_items of this OrderRefund.  # noqa: E501


        :return: The refund_items of this OrderRefund.  # noqa: E501
        :rtype: list[OrderRefundItem]
        """
        return self._refund_items

    @refund_items.setter
    def refund_items(self, refund_items):
        """Sets the refund_items of this OrderRefund.


        :param refund_items: The refund_items of this OrderRefund.  # noqa: E501
        :type: list[OrderRefundItem]
        """

        self._refund_items = refund_items

    @property
    def shipping_reason_code(self):
        """Gets the shipping_reason_code of this OrderRefund.  # noqa: E501


        :return: The shipping_reason_code of this OrderRefund.  # noqa: E501
        :rtype: str
        """
        return self._shipping_reason_code

    @shipping_reason_code.setter
    def shipping_reason_code(self, shipping_reason_code):
        """Sets the shipping_reason_code of this OrderRefund.


        :param shipping_reason_code: The shipping_reason_code of this OrderRefund.  # noqa: E501
        :type: str
        """

        self._shipping_reason_code = shipping_reason_code

    @property
    def shipping_reason_label(self):
        """Gets the shipping_reason_label of this OrderRefund.  # noqa: E501


        :return: The shipping_reason_label of this OrderRefund.  # noqa: E501
        :rtype: str
        """
        return self._shipping_reason_label

    @shipping_reason_label.setter
    def shipping_reason_label(self, shipping_reason_label):
        """Sets the shipping_reason_label of this OrderRefund.


        :param shipping_reason_label: The shipping_reason_label of this OrderRefund.  # noqa: E501
        :type: str
        """

        self._shipping_reason_label = shipping_reason_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRefund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRefund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
