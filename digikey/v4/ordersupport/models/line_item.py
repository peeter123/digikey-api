# coding: utf-8

"""
    Order Details

    Retrieve information about current and past orders.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'po_line_item_number': 'str',
        'digi_key_part_number': 'str',
        'manufacturer_part_number': 'str',
        'product_description': 'str',
        'manufacturer': 'str',
        'country_of_origin': 'str',
        'quantity': 'int',
        'customer_reference': 'str',
        'unit_price': 'float',
        'total_price': 'float',
        'quantity_backorder': 'int',
        'back_order_details': 'BackOrderDetails',
        'quantity_shipped': 'int',
        'invoice_id': 'int',
        'default_shipping': 'DefaultShipping',
        'schedule': 'list[Schedule]'
    }

    attribute_map = {
        'po_line_item_number': 'PoLineItemNumber',
        'digi_key_part_number': 'DigiKeyPartNumber',
        'manufacturer_part_number': 'ManufacturerPartNumber',
        'product_description': 'ProductDescription',
        'manufacturer': 'Manufacturer',
        'country_of_origin': 'CountryOfOrigin',
        'quantity': 'Quantity',
        'customer_reference': 'CustomerReference',
        'unit_price': 'UnitPrice',
        'total_price': 'TotalPrice',
        'quantity_backorder': 'QuantityBackorder',
        'back_order_details': 'BackOrderDetails',
        'quantity_shipped': 'QuantityShipped',
        'invoice_id': 'InvoiceId',
        'default_shipping': 'DefaultShipping',
        'schedule': 'Schedule'
    }

    def __init__(self, po_line_item_number=None, digi_key_part_number=None, manufacturer_part_number=None, product_description=None, manufacturer=None, country_of_origin=None, quantity=None, customer_reference=None, unit_price=None, total_price=None, quantity_backorder=None, back_order_details=None, quantity_shipped=None, invoice_id=None, default_shipping=None, schedule=None):  # noqa: E501
        """LineItem - a model defined in Swagger"""  # noqa: E501

        self._po_line_item_number = None
        self._digi_key_part_number = None
        self._manufacturer_part_number = None
        self._product_description = None
        self._manufacturer = None
        self._country_of_origin = None
        self._quantity = None
        self._customer_reference = None
        self._unit_price = None
        self._total_price = None
        self._quantity_backorder = None
        self._back_order_details = None
        self._quantity_shipped = None
        self._invoice_id = None
        self._default_shipping = None
        self._schedule = None
        self.discriminator = None

        if po_line_item_number is not None:
            self.po_line_item_number = po_line_item_number
        if digi_key_part_number is not None:
            self.digi_key_part_number = digi_key_part_number
        if manufacturer_part_number is not None:
            self.manufacturer_part_number = manufacturer_part_number
        if product_description is not None:
            self.product_description = product_description
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin
        if quantity is not None:
            self.quantity = quantity
        if customer_reference is not None:
            self.customer_reference = customer_reference
        if unit_price is not None:
            self.unit_price = unit_price
        if total_price is not None:
            self.total_price = total_price
        if quantity_backorder is not None:
            self.quantity_backorder = quantity_backorder
        if back_order_details is not None:
            self.back_order_details = back_order_details
        if quantity_shipped is not None:
            self.quantity_shipped = quantity_shipped
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if default_shipping is not None:
            self.default_shipping = default_shipping
        if schedule is not None:
            self.schedule = schedule

    @property
    def po_line_item_number(self):
        """Gets the po_line_item_number of this LineItem.  # noqa: E501

        Line item number provided on purchase order  # noqa: E501

        :return: The po_line_item_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._po_line_item_number

    @po_line_item_number.setter
    def po_line_item_number(self, po_line_item_number):
        """Sets the po_line_item_number of this LineItem.

        Line item number provided on purchase order  # noqa: E501

        :param po_line_item_number: The po_line_item_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._po_line_item_number = po_line_item_number

    @property
    def digi_key_part_number(self):
        """Gets the digi_key_part_number of this LineItem.  # noqa: E501

        The Digi-Key part number.  # noqa: E501

        :return: The digi_key_part_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_part_number

    @digi_key_part_number.setter
    def digi_key_part_number(self, digi_key_part_number):
        """Sets the digi_key_part_number of this LineItem.

        The Digi-Key part number.  # noqa: E501

        :param digi_key_part_number: The digi_key_part_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._digi_key_part_number = digi_key_part_number

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this LineItem.  # noqa: E501

        The Manufacturer Part Number.  # noqa: E501

        :return: The manufacturer_part_number of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this LineItem.

        The Manufacturer Part Number.  # noqa: E501

        :param manufacturer_part_number: The manufacturer_part_number of this LineItem.  # noqa: E501
        :type: str
        """

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def product_description(self):
        """Gets the product_description of this LineItem.  # noqa: E501

        Catalog description of the product.  # noqa: E501

        :return: The product_description of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this LineItem.

        Catalog description of the product.  # noqa: E501

        :param product_description: The product_description of this LineItem.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def manufacturer(self):
        """Gets the manufacturer of this LineItem.  # noqa: E501

        The Manufacturer of the product.  # noqa: E501

        :return: The manufacturer of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this LineItem.

        The Manufacturer of the product.  # noqa: E501

        :param manufacturer: The manufacturer of this LineItem.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this LineItem.  # noqa: E501

        The Country Of Origin of the product  # noqa: E501

        :return: The country_of_origin of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this LineItem.

        The Country Of Origin of the product  # noqa: E501

        :param country_of_origin: The country_of_origin of this LineItem.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    @property
    def quantity(self):
        """Gets the quantity of this LineItem.  # noqa: E501

        The total quantity for the order.  # noqa: E501

        :return: The quantity of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItem.

        The total quantity for the order.  # noqa: E501

        :param quantity: The quantity of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def customer_reference(self):
        """Gets the customer_reference of this LineItem.  # noqa: E501

        Freeform customer reference  # noqa: E501

        :return: The customer_reference of this LineItem.  # noqa: E501
        :rtype: str
        """
        return self._customer_reference

    @customer_reference.setter
    def customer_reference(self, customer_reference):
        """Sets the customer_reference of this LineItem.

        Freeform customer reference  # noqa: E501

        :param customer_reference: The customer_reference of this LineItem.  # noqa: E501
        :type: str
        """

        self._customer_reference = customer_reference

    @property
    def unit_price(self):
        """Gets the unit_price of this LineItem.  # noqa: E501

        The price for a single unit of this product.  # noqa: E501

        :return: The unit_price of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this LineItem.

        The price for a single unit of this product.  # noqa: E501

        :param unit_price: The unit_price of this LineItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def total_price(self):
        """Gets the total_price of this LineItem.  # noqa: E501

        Price of ordered quantity of the product.  # noqa: E501

        :return: The total_price of this LineItem.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this LineItem.

        Price of ordered quantity of the product.  # noqa: E501

        :param total_price: The total_price of this LineItem.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def quantity_backorder(self):
        """Gets the quantity_backorder of this LineItem.  # noqa: E501

        The quantity on backorder  # noqa: E501

        :return: The quantity_backorder of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_backorder

    @quantity_backorder.setter
    def quantity_backorder(self, quantity_backorder):
        """Sets the quantity_backorder of this LineItem.

        The quantity on backorder  # noqa: E501

        :param quantity_backorder: The quantity_backorder of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity_backorder = quantity_backorder

    @property
    def back_order_details(self):
        """Gets the back_order_details of this LineItem.  # noqa: E501


        :return: The back_order_details of this LineItem.  # noqa: E501
        :rtype: BackOrderDetails
        """
        return self._back_order_details

    @back_order_details.setter
    def back_order_details(self, back_order_details):
        """Sets the back_order_details of this LineItem.


        :param back_order_details: The back_order_details of this LineItem.  # noqa: E501
        :type: BackOrderDetails
        """

        self._back_order_details = back_order_details

    @property
    def quantity_shipped(self):
        """Gets the quantity_shipped of this LineItem.  # noqa: E501

        The quantity shipped  # noqa: E501

        :return: The quantity_shipped of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_shipped

    @quantity_shipped.setter
    def quantity_shipped(self, quantity_shipped):
        """Sets the quantity_shipped of this LineItem.

        The quantity shipped  # noqa: E501

        :param quantity_shipped: The quantity_shipped of this LineItem.  # noqa: E501
        :type: int
        """

        self._quantity_shipped = quantity_shipped

    @property
    def invoice_id(self):
        """Gets the invoice_id of this LineItem.  # noqa: E501

        The Invoice Id for this shipment  # noqa: E501

        :return: The invoice_id of this LineItem.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this LineItem.

        The Invoice Id for this shipment  # noqa: E501

        :param invoice_id: The invoice_id of this LineItem.  # noqa: E501
        :type: int
        """

        self._invoice_id = invoice_id

    @property
    def default_shipping(self):
        """Gets the default_shipping of this LineItem.  # noqa: E501


        :return: The default_shipping of this LineItem.  # noqa: E501
        :rtype: DefaultShipping
        """
        return self._default_shipping

    @default_shipping.setter
    def default_shipping(self, default_shipping):
        """Sets the default_shipping of this LineItem.


        :param default_shipping: The default_shipping of this LineItem.  # noqa: E501
        :type: DefaultShipping
        """

        self._default_shipping = default_shipping

    @property
    def schedule(self):
        """Gets the schedule of this LineItem.  # noqa: E501

        The Scheduled shipment  # noqa: E501

        :return: The schedule of this LineItem.  # noqa: E501
        :rtype: list[Schedule]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this LineItem.

        The Scheduled shipment  # noqa: E501

        :param schedule: The schedule of this LineItem.  # noqa: E501
        :type: list[Schedule]
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
