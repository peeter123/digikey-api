# coding: utf-8

"""
    Order Details

    Retrieve information about current and past orders.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'salesorder_id': 'int',
        'customer_id': 'int',
        'billing_account': 'int',
        'email': 'str',
        'purchase_order': 'str',
        'payment_method': 'str',
        'supplier': 'str',
        'shipping_method': 'str',
        'backorder_shipping_method': 'str',
        'shipper_account_number': 'str',
        'backorder_shipper_account_number': 'str',
        'shipment_type': 'str',
        'currency': 'str',
        'shipping_address': 'Address',
        'billing_address': 'Address',
        'shipping_details': 'list[ShippingDetail]',
        'line_items': 'list[LineItem]'
    }

    attribute_map = {
        'salesorder_id': 'SalesorderId',
        'customer_id': 'CustomerId',
        'billing_account': 'BillingAccount',
        'email': 'Email',
        'purchase_order': 'PurchaseOrder',
        'payment_method': 'PaymentMethod',
        'supplier': 'Supplier',
        'shipping_method': 'ShippingMethod',
        'backorder_shipping_method': 'BackorderShippingMethod',
        'shipper_account_number': 'ShipperAccountNumber',
        'backorder_shipper_account_number': 'BackorderShipperAccountNumber',
        'shipment_type': 'ShipmentType',
        'currency': 'Currency',
        'shipping_address': 'ShippingAddress',
        'billing_address': 'BillingAddress',
        'shipping_details': 'ShippingDetails',
        'line_items': 'LineItems'
    }

    def __init__(self, salesorder_id=None, customer_id=None, billing_account=None, email=None, purchase_order=None, payment_method=None, supplier=None, shipping_method=None, backorder_shipping_method=None, shipper_account_number=None, backorder_shipper_account_number=None, shipment_type=None, currency=None, shipping_address=None, billing_address=None, shipping_details=None, line_items=None):  # noqa: E501
        """OrderStatusResponse - a model defined in Swagger"""  # noqa: E501

        self._salesorder_id = None
        self._customer_id = None
        self._billing_account = None
        self._email = None
        self._purchase_order = None
        self._payment_method = None
        self._supplier = None
        self._shipping_method = None
        self._backorder_shipping_method = None
        self._shipper_account_number = None
        self._backorder_shipper_account_number = None
        self._shipment_type = None
        self._currency = None
        self._shipping_address = None
        self._billing_address = None
        self._shipping_details = None
        self._line_items = None
        self.discriminator = None

        if salesorder_id is not None:
            self.salesorder_id = salesorder_id
        if customer_id is not None:
            self.customer_id = customer_id
        if billing_account is not None:
            self.billing_account = billing_account
        if email is not None:
            self.email = email
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if payment_method is not None:
            self.payment_method = payment_method
        if supplier is not None:
            self.supplier = supplier
        if shipping_method is not None:
            self.shipping_method = shipping_method
        if backorder_shipping_method is not None:
            self.backorder_shipping_method = backorder_shipping_method
        if shipper_account_number is not None:
            self.shipper_account_number = shipper_account_number
        if backorder_shipper_account_number is not None:
            self.backorder_shipper_account_number = backorder_shipper_account_number
        if shipment_type is not None:
            self.shipment_type = shipment_type
        if currency is not None:
            self.currency = currency
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if billing_address is not None:
            self.billing_address = billing_address
        if shipping_details is not None:
            self.shipping_details = shipping_details
        if line_items is not None:
            self.line_items = line_items

    @property
    def salesorder_id(self):
        """Gets the salesorder_id of this OrderStatusResponse.  # noqa: E501

        Id for this order  # noqa: E501

        :return: The salesorder_id of this OrderStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._salesorder_id

    @salesorder_id.setter
    def salesorder_id(self, salesorder_id):
        """Sets the salesorder_id of this OrderStatusResponse.

        Id for this order  # noqa: E501

        :param salesorder_id: The salesorder_id of this OrderStatusResponse.  # noqa: E501
        :type: int
        """

        self._salesorder_id = salesorder_id

    @property
    def customer_id(self):
        """Gets the customer_id of this OrderStatusResponse.  # noqa: E501

        Your Digi-Key customer Id  # noqa: E501

        :return: The customer_id of this OrderStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this OrderStatusResponse.

        Your Digi-Key customer Id  # noqa: E501

        :param customer_id: The customer_id of this OrderStatusResponse.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def billing_account(self):
        """Gets the billing_account of this OrderStatusResponse.  # noqa: E501

        Net Terms billing account number used for the order.  # noqa: E501

        :return: The billing_account of this OrderStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this OrderStatusResponse.

        Net Terms billing account number used for the order.  # noqa: E501

        :param billing_account: The billing_account of this OrderStatusResponse.  # noqa: E501
        :type: int
        """

        self._billing_account = billing_account

    @property
    def email(self):
        """Gets the email of this OrderStatusResponse.  # noqa: E501

        Email Address  # noqa: E501

        :return: The email of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrderStatusResponse.

        Email Address  # noqa: E501

        :param email: The email of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def purchase_order(self):
        """Gets the purchase_order of this OrderStatusResponse.  # noqa: E501

        Freeform purchase order  # noqa: E501

        :return: The purchase_order of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this OrderStatusResponse.

        Freeform purchase order  # noqa: E501

        :param purchase_order: The purchase_order of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._purchase_order = purchase_order

    @property
    def payment_method(self):
        """Gets the payment_method of this OrderStatusResponse.  # noqa: E501

        Payment method for the order  # noqa: E501

        :return: The payment_method of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this OrderStatusResponse.

        Payment method for the order  # noqa: E501

        :param payment_method: The payment_method of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def supplier(self):
        """Gets the supplier of this OrderStatusResponse.  # noqa: E501

        Shipped by  # noqa: E501

        :return: The supplier of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this OrderStatusResponse.

        Shipped by  # noqa: E501

        :param supplier: The supplier of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    @property
    def shipping_method(self):
        """Gets the shipping_method of this OrderStatusResponse.  # noqa: E501

        Shipping method requested  # noqa: E501

        :return: The shipping_method of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """Sets the shipping_method of this OrderStatusResponse.

        Shipping method requested  # noqa: E501

        :param shipping_method: The shipping_method of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._shipping_method = shipping_method

    @property
    def backorder_shipping_method(self):
        """Gets the backorder_shipping_method of this OrderStatusResponse.  # noqa: E501

        Backorder shipping method requested  # noqa: E501

        :return: The backorder_shipping_method of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._backorder_shipping_method

    @backorder_shipping_method.setter
    def backorder_shipping_method(self, backorder_shipping_method):
        """Sets the backorder_shipping_method of this OrderStatusResponse.

        Backorder shipping method requested  # noqa: E501

        :param backorder_shipping_method: The backorder_shipping_method of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._backorder_shipping_method = backorder_shipping_method

    @property
    def shipper_account_number(self):
        """Gets the shipper_account_number of this OrderStatusResponse.  # noqa: E501

        Account number with the shipper  # noqa: E501

        :return: The shipper_account_number of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipper_account_number

    @shipper_account_number.setter
    def shipper_account_number(self, shipper_account_number):
        """Sets the shipper_account_number of this OrderStatusResponse.

        Account number with the shipper  # noqa: E501

        :param shipper_account_number: The shipper_account_number of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._shipper_account_number = shipper_account_number

    @property
    def backorder_shipper_account_number(self):
        """Gets the backorder_shipper_account_number of this OrderStatusResponse.  # noqa: E501

        Account number with the backorder shipper  # noqa: E501

        :return: The backorder_shipper_account_number of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._backorder_shipper_account_number

    @backorder_shipper_account_number.setter
    def backorder_shipper_account_number(self, backorder_shipper_account_number):
        """Sets the backorder_shipper_account_number of this OrderStatusResponse.

        Account number with the backorder shipper  # noqa: E501

        :param backorder_shipper_account_number: The backorder_shipper_account_number of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._backorder_shipper_account_number = backorder_shipper_account_number

    @property
    def shipment_type(self):
        """Gets the shipment_type of this OrderStatusResponse.  # noqa: E501

        Can be Immediate, Double or Single. If Immediate, all items will ship as available. If Double, all items immediately available will ship, and other items will be held untill all are available. If Single, entire order is held untill all items are available.  # noqa: E501

        :return: The shipment_type of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this OrderStatusResponse.

        Can be Immediate, Double or Single. If Immediate, all items will ship as available. If Double, all items immediately available will ship, and other items will be held untill all are available. If Single, entire order is held untill all items are available.  # noqa: E501

        :param shipment_type: The shipment_type of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._shipment_type = shipment_type

    @property
    def currency(self):
        """Gets the currency of this OrderStatusResponse.  # noqa: E501

        ISO code for currency used in the order.  # noqa: E501

        :return: The currency of this OrderStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderStatusResponse.

        ISO code for currency used in the order.  # noqa: E501

        :param currency: The currency of this OrderStatusResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def shipping_address(self):
        """Gets the shipping_address of this OrderStatusResponse.  # noqa: E501


        :return: The shipping_address of this OrderStatusResponse.  # noqa: E501
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this OrderStatusResponse.


        :param shipping_address: The shipping_address of this OrderStatusResponse.  # noqa: E501
        :type: Address
        """

        self._shipping_address = shipping_address

    @property
    def billing_address(self):
        """Gets the billing_address of this OrderStatusResponse.  # noqa: E501


        :return: The billing_address of this OrderStatusResponse.  # noqa: E501
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this OrderStatusResponse.


        :param billing_address: The billing_address of this OrderStatusResponse.  # noqa: E501
        :type: Address
        """

        self._billing_address = billing_address

    @property
    def shipping_details(self):
        """Gets the shipping_details of this OrderStatusResponse.  # noqa: E501

        List of shipping details  # noqa: E501

        :return: The shipping_details of this OrderStatusResponse.  # noqa: E501
        :rtype: list[ShippingDetail]
        """
        return self._shipping_details

    @shipping_details.setter
    def shipping_details(self, shipping_details):
        """Sets the shipping_details of this OrderStatusResponse.

        List of shipping details  # noqa: E501

        :param shipping_details: The shipping_details of this OrderStatusResponse.  # noqa: E501
        :type: list[ShippingDetail]
        """

        self._shipping_details = shipping_details

    @property
    def line_items(self):
        """Gets the line_items of this OrderStatusResponse.  # noqa: E501

        List of line items  # noqa: E501

        :return: The line_items of this OrderStatusResponse.  # noqa: E501
        :rtype: list[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this OrderStatusResponse.

        List of line items  # noqa: E501

        :param line_items: The line_items of this OrderStatusResponse.  # noqa: E501
        :type: list[LineItem]
        """

        self._line_items = line_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
