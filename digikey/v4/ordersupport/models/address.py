# coding: utf-8

"""
    Order Details

    Retrieve information about current and past orders.  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'address_line_one': 'str',
        'address_line_two': 'str',
        'address_line_three': 'str',
        'city': 'str',
        'province': 'str',
        'postal_code': 'str',
        'country': 'str'
    }

    attribute_map = {
        'company': 'Company',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'address_line_one': 'AddressLineOne',
        'address_line_two': 'AddressLineTwo',
        'address_line_three': 'AddressLineThree',
        'city': 'City',
        'province': 'Province',
        'postal_code': 'PostalCode',
        'country': 'Country'
    }

    def __init__(self, company=None, first_name=None, last_name=None, address_line_one=None, address_line_two=None, address_line_three=None, city=None, province=None, postal_code=None, country=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501

        self._company = None
        self._first_name = None
        self._last_name = None
        self._address_line_one = None
        self._address_line_two = None
        self._address_line_three = None
        self._city = None
        self._province = None
        self._postal_code = None
        self._country = None
        self.discriminator = None

        if company is not None:
            self.company = company
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if address_line_one is not None:
            self.address_line_one = address_line_one
        if address_line_two is not None:
            self.address_line_two = address_line_two
        if address_line_three is not None:
            self.address_line_three = address_line_three
        if city is not None:
            self.city = city
        if province is not None:
            self.province = province
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country

    @property
    def company(self):
        """Gets the company of this Address.  # noqa: E501

        Company or Organization name  # noqa: E501

        :return: The company of this Address.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Address.

        Company or Organization name  # noqa: E501

        :param company: The company of this Address.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def first_name(self):
        """Gets the first_name of this Address.  # noqa: E501

        First Name  # noqa: E501

        :return: The first_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Address.

        First Name  # noqa: E501

        :param first_name: The first_name of this Address.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Address.  # noqa: E501

        Last Name  # noqa: E501

        :return: The last_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Address.

        Last Name  # noqa: E501

        :param last_name: The last_name of this Address.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def address_line_one(self):
        """Gets the address_line_one of this Address.  # noqa: E501

        First line of address  # noqa: E501

        :return: The address_line_one of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line_one

    @address_line_one.setter
    def address_line_one(self, address_line_one):
        """Sets the address_line_one of this Address.

        First line of address  # noqa: E501

        :param address_line_one: The address_line_one of this Address.  # noqa: E501
        :type: str
        """

        self._address_line_one = address_line_one

    @property
    def address_line_two(self):
        """Gets the address_line_two of this Address.  # noqa: E501

        Second line of address  # noqa: E501

        :return: The address_line_two of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line_two

    @address_line_two.setter
    def address_line_two(self, address_line_two):
        """Sets the address_line_two of this Address.

        Second line of address  # noqa: E501

        :param address_line_two: The address_line_two of this Address.  # noqa: E501
        :type: str
        """

        self._address_line_two = address_line_two

    @property
    def address_line_three(self):
        """Gets the address_line_three of this Address.  # noqa: E501

        Third line of address  # noqa: E501

        :return: The address_line_three of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line_three

    @address_line_three.setter
    def address_line_three(self, address_line_three):
        """Sets the address_line_three of this Address.

        Third line of address  # noqa: E501

        :param address_line_three: The address_line_three of this Address.  # noqa: E501
        :type: str
        """

        self._address_line_three = address_line_three

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        City  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        City  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def province(self):
        """Gets the province of this Address.  # noqa: E501

        Province or State  # noqa: E501

        :return: The province of this Address.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Address.

        Province or State  # noqa: E501

        :param province: The province of this Address.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        Postal Code or Zip Code  # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Postal Code or Zip Code  # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501

        Country 2 digit ISO code  # noqa: E501

        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        Country 2 digit ISO code  # noqa: E501

        :param country: The country of this Address.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
