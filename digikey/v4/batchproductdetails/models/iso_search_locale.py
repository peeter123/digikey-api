# coding: utf-8

"""
    Batch Product Details Api

    Retrieve list of product details from list of part numbers  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IsoSearchLocale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site': 'str',
        'language': 'str',
        'currency': 'str',
        'ship_to_country': 'str'
    }

    attribute_map = {
        'site': 'Site',
        'language': 'Language',
        'currency': 'Currency',
        'ship_to_country': 'ShipToCountry'
    }

    def __init__(self, site=None, language=None, currency=None, ship_to_country=None):  # noqa: E501
        """IsoSearchLocale - a model defined in Swagger"""  # noqa: E501

        self._site = None
        self._language = None
        self._currency = None
        self._ship_to_country = None
        self.discriminator = None

        if site is not None:
            self.site = site
        if language is not None:
            self.language = language
        if currency is not None:
            self.currency = currency
        if ship_to_country is not None:
            self.ship_to_country = ship_to_country

    @property
    def site(self):
        """Gets the site of this IsoSearchLocale.  # noqa: E501

        The site used for the API call.  # noqa: E501

        :return: The site of this IsoSearchLocale.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this IsoSearchLocale.

        The site used for the API call.  # noqa: E501

        :param site: The site of this IsoSearchLocale.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def language(self):
        """Gets the language of this IsoSearchLocale.  # noqa: E501

        The language used for the API call. If the provided language is not valid for the site, it will be set to the site default.  # noqa: E501

        :return: The language of this IsoSearchLocale.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this IsoSearchLocale.

        The language used for the API call. If the provided language is not valid for the site, it will be set to the site default.  # noqa: E501

        :param language: The language of this IsoSearchLocale.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def currency(self):
        """Gets the currency of this IsoSearchLocale.  # noqa: E501

        The currency used for the API call. If the provided currency is not valid for the site, it will be set to the site default.  # noqa: E501

        :return: The currency of this IsoSearchLocale.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this IsoSearchLocale.

        The currency used for the API call. If the provided currency is not valid for the site, it will be set to the site default.  # noqa: E501

        :param currency: The currency of this IsoSearchLocale.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def ship_to_country(self):
        """Gets the ship_to_country of this IsoSearchLocale.  # noqa: E501

        The destination for shipping the product. This is used for tariffs and regional pricing.  # noqa: E501

        :return: The ship_to_country of this IsoSearchLocale.  # noqa: E501
        :rtype: str
        """
        return self._ship_to_country

    @ship_to_country.setter
    def ship_to_country(self, ship_to_country):
        """Sets the ship_to_country of this IsoSearchLocale.

        The destination for shipping the product. This is used for tariffs and regional pricing.  # noqa: E501

        :param ship_to_country: The ship_to_country of this IsoSearchLocale.  # noqa: E501
        :type: str
        """

        self._ship_to_country = ship_to_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IsoSearchLocale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IsoSearchLocale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
