# coding: utf-8

"""
    Batch Product Details Api

    Retrieve list of product details from list of part numbers  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MediaLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'media_type': 'str',
        'title': 'str',
        'small_photo': 'str',
        'thumbnail': 'str',
        'url': 'str'
    }

    attribute_map = {
        'media_type': 'MediaType',
        'title': 'Title',
        'small_photo': 'SmallPhoto',
        'thumbnail': 'Thumbnail',
        'url': 'Url'
    }

    def __init__(self, media_type=None, title=None, small_photo=None, thumbnail=None, url=None):  # noqa: E501
        """MediaLinks - a model defined in Swagger"""  # noqa: E501

        self._media_type = None
        self._title = None
        self._small_photo = None
        self._thumbnail = None
        self._url = None
        self.discriminator = None

        if media_type is not None:
            self.media_type = media_type
        if title is not None:
            self.title = title
        if small_photo is not None:
            self.small_photo = small_photo
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if url is not None:
            self.url = url

    @property
    def media_type(self):
        """Gets the media_type of this MediaLinks.  # noqa: E501

        The type of media.  # noqa: E501

        :return: The media_type of this MediaLinks.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this MediaLinks.

        The type of media.  # noqa: E501

        :param media_type: The media_type of this MediaLinks.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def title(self):
        """Gets the title of this MediaLinks.  # noqa: E501

        The title of the media.  # noqa: E501

        :return: The title of this MediaLinks.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MediaLinks.

        The title of the media.  # noqa: E501

        :param title: The title of this MediaLinks.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def small_photo(self):
        """Gets the small_photo of this MediaLinks.  # noqa: E501

        URL to a small photo.  # noqa: E501

        :return: The small_photo of this MediaLinks.  # noqa: E501
        :rtype: str
        """
        return self._small_photo

    @small_photo.setter
    def small_photo(self, small_photo):
        """Sets the small_photo of this MediaLinks.

        URL to a small photo.  # noqa: E501

        :param small_photo: The small_photo of this MediaLinks.  # noqa: E501
        :type: str
        """

        self._small_photo = small_photo

    @property
    def thumbnail(self):
        """Gets the thumbnail of this MediaLinks.  # noqa: E501

        URL to the thumbnail image of the media.  # noqa: E501

        :return: The thumbnail of this MediaLinks.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this MediaLinks.

        URL to the thumbnail image of the media.  # noqa: E501

        :param thumbnail: The thumbnail of this MediaLinks.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def url(self):
        """Gets the url of this MediaLinks.  # noqa: E501

        URL of the media.  # noqa: E501

        :return: The url of this MediaLinks.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MediaLinks.

        URL of the media.  # noqa: E501

        :param url: The url of this MediaLinks.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
