# coding: utf-8

"""
    Batch Product Details Api

    Retrieve list of product details from list of part numbers  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'my_pricing': 'list[PriceBreak]',
        'obsolete': 'bool',
        'media_links': 'list[MediaLinks]',
        'standard_package': 'int',
        'limited_taxonomy': 'LimitedTaxonomy',
        'kits': 'list[AssociatedProduct]',
        'kit_contents': 'list[KitPart]',
        'mating_products': 'list[AssociatedProduct]',
        'search_locale_used': 'IsoSearchLocale',
        'associated_products': 'list[AssociatedProduct]',
        'for_use_with_products': 'list[AssociatedProduct]',
        'rohs_subs': 'list[AssociatedProduct]',
        'suggested_subs': 'list[AssociatedProduct]',
        'additional_value_fee': 'float',
        'reach_effective_date': 'str',
        'standard_pricing': 'list[PriceBreak]',
        'ro_hs_status': 'str',
        'lead_status': 'str',
        'parameters': 'list[PidVid]',
        'product_url': 'str',
        'primary_datasheet': 'str',
        'primary_photo': 'str',
        'primary_video': 'str',
        'series': 'PidVid',
        'manufacturer_lead_weeks': 'str',
        'manufacturer_page_url': 'str',
        'product_status': 'str',
        'date_last_buy_chance': 'datetime',
        'alternate_packaging': 'list[BasicProduct]',
        'detailed_description': 'str',
        'reach_status': 'str',
        'export_control_class_number': 'str',
        'htsus_code': 'str',
        'tariff_description': 'str',
        'moisture_sensitivity_level': 'str',
        'manufacturer_part_number': 'str',
        'minimum_order_quantity': 'int',
        'non_stock': 'bool',
        'packaging': 'PidVid',
        'quantity_available': 'int',
        'digi_key_part_number': 'str',
        'product_description': 'str',
        'unit_price': 'float',
        'manufacturer': 'PidVid',
        'manufacturer_public_quantity': 'int',
        'quantity_on_order': 'int',
        'dk_plus_restriction': 'bool',
        'supplier_direct_ship': 'bool'
    }

    attribute_map = {
        'my_pricing': 'MyPricing',
        'obsolete': 'Obsolete',
        'media_links': 'MediaLinks',
        'standard_package': 'StandardPackage',
        'limited_taxonomy': 'LimitedTaxonomy',
        'kits': 'Kits',
        'kit_contents': 'KitContents',
        'mating_products': 'MatingProducts',
        'search_locale_used': 'SearchLocaleUsed',
        'associated_products': 'AssociatedProducts',
        'for_use_with_products': 'ForUseWithProducts',
        'rohs_subs': 'RohsSubs',
        'suggested_subs': 'SuggestedSubs',
        'additional_value_fee': 'AdditionalValueFee',
        'reach_effective_date': 'ReachEffectiveDate',
        'standard_pricing': 'StandardPricing',
        'ro_hs_status': 'RoHSStatus',
        'lead_status': 'LeadStatus',
        'parameters': 'Parameters',
        'product_url': 'ProductUrl',
        'primary_datasheet': 'PrimaryDatasheet',
        'primary_photo': 'PrimaryPhoto',
        'primary_video': 'PrimaryVideo',
        'series': 'Series',
        'manufacturer_lead_weeks': 'ManufacturerLeadWeeks',
        'manufacturer_page_url': 'ManufacturerPageUrl',
        'product_status': 'ProductStatus',
        'date_last_buy_chance': 'DateLastBuyChance',
        'alternate_packaging': 'AlternatePackaging',
        'detailed_description': 'DetailedDescription',
        'reach_status': 'ReachStatus',
        'export_control_class_number': 'ExportControlClassNumber',
        'htsus_code': 'HTSUSCode',
        'tariff_description': 'TariffDescription',
        'moisture_sensitivity_level': 'MoistureSensitivityLevel',
        'manufacturer_part_number': 'ManufacturerPartNumber',
        'minimum_order_quantity': 'MinimumOrderQuantity',
        'non_stock': 'NonStock',
        'packaging': 'Packaging',
        'quantity_available': 'QuantityAvailable',
        'digi_key_part_number': 'DigiKeyPartNumber',
        'product_description': 'ProductDescription',
        'unit_price': 'UnitPrice',
        'manufacturer': 'Manufacturer',
        'manufacturer_public_quantity': 'ManufacturerPublicQuantity',
        'quantity_on_order': 'QuantityOnOrder',
        'dk_plus_restriction': 'DKPlusRestriction',
        'supplier_direct_ship': 'SupplierDirectShip'
    }

    def __init__(self, my_pricing=None, obsolete=None, media_links=None, standard_package=None, limited_taxonomy=None, kits=None, kit_contents=None, mating_products=None, search_locale_used=None, associated_products=None, for_use_with_products=None, rohs_subs=None, suggested_subs=None, additional_value_fee=None, reach_effective_date=None, standard_pricing=None, ro_hs_status=None, lead_status=None, parameters=None, product_url=None, primary_datasheet=None, primary_photo=None, primary_video=None, series=None, manufacturer_lead_weeks=None, manufacturer_page_url=None, product_status=None, date_last_buy_chance=None, alternate_packaging=None, detailed_description=None, reach_status=None, export_control_class_number=None, htsus_code=None, tariff_description=None, moisture_sensitivity_level=None, manufacturer_part_number=None, minimum_order_quantity=None, non_stock=None, packaging=None, quantity_available=None, digi_key_part_number=None, product_description=None, unit_price=None, manufacturer=None, manufacturer_public_quantity=None, quantity_on_order=None, dk_plus_restriction=None, supplier_direct_ship=None):  # noqa: E501
        """ProductDetails - a model defined in Swagger"""  # noqa: E501

        self._my_pricing = None
        self._obsolete = None
        self._media_links = None
        self._standard_package = None
        self._limited_taxonomy = None
        self._kits = None
        self._kit_contents = None
        self._mating_products = None
        self._search_locale_used = None
        self._associated_products = None
        self._for_use_with_products = None
        self._rohs_subs = None
        self._suggested_subs = None
        self._additional_value_fee = None
        self._reach_effective_date = None
        self._standard_pricing = None
        self._ro_hs_status = None
        self._lead_status = None
        self._parameters = None
        self._product_url = None
        self._primary_datasheet = None
        self._primary_photo = None
        self._primary_video = None
        self._series = None
        self._manufacturer_lead_weeks = None
        self._manufacturer_page_url = None
        self._product_status = None
        self._date_last_buy_chance = None
        self._alternate_packaging = None
        self._detailed_description = None
        self._reach_status = None
        self._export_control_class_number = None
        self._htsus_code = None
        self._tariff_description = None
        self._moisture_sensitivity_level = None
        self._manufacturer_part_number = None
        self._minimum_order_quantity = None
        self._non_stock = None
        self._packaging = None
        self._quantity_available = None
        self._digi_key_part_number = None
        self._product_description = None
        self._unit_price = None
        self._manufacturer = None
        self._manufacturer_public_quantity = None
        self._quantity_on_order = None
        self._dk_plus_restriction = None
        self._supplier_direct_ship = None
        self.discriminator = None

        if my_pricing is not None:
            self.my_pricing = my_pricing
        if obsolete is not None:
            self.obsolete = obsolete
        if media_links is not None:
            self.media_links = media_links
        if standard_package is not None:
            self.standard_package = standard_package
        if limited_taxonomy is not None:
            self.limited_taxonomy = limited_taxonomy
        if kits is not None:
            self.kits = kits
        if kit_contents is not None:
            self.kit_contents = kit_contents
        if mating_products is not None:
            self.mating_products = mating_products
        if search_locale_used is not None:
            self.search_locale_used = search_locale_used
        if associated_products is not None:
            self.associated_products = associated_products
        if for_use_with_products is not None:
            self.for_use_with_products = for_use_with_products
        if rohs_subs is not None:
            self.rohs_subs = rohs_subs
        if suggested_subs is not None:
            self.suggested_subs = suggested_subs
        if additional_value_fee is not None:
            self.additional_value_fee = additional_value_fee
        if reach_effective_date is not None:
            self.reach_effective_date = reach_effective_date
        if standard_pricing is not None:
            self.standard_pricing = standard_pricing
        if ro_hs_status is not None:
            self.ro_hs_status = ro_hs_status
        if lead_status is not None:
            self.lead_status = lead_status
        if parameters is not None:
            self.parameters = parameters
        if product_url is not None:
            self.product_url = product_url
        if primary_datasheet is not None:
            self.primary_datasheet = primary_datasheet
        if primary_photo is not None:
            self.primary_photo = primary_photo
        if primary_video is not None:
            self.primary_video = primary_video
        if series is not None:
            self.series = series
        if manufacturer_lead_weeks is not None:
            self.manufacturer_lead_weeks = manufacturer_lead_weeks
        if manufacturer_page_url is not None:
            self.manufacturer_page_url = manufacturer_page_url
        if product_status is not None:
            self.product_status = product_status
        if date_last_buy_chance is not None:
            self.date_last_buy_chance = date_last_buy_chance
        if alternate_packaging is not None:
            self.alternate_packaging = alternate_packaging
        if detailed_description is not None:
            self.detailed_description = detailed_description
        if reach_status is not None:
            self.reach_status = reach_status
        if export_control_class_number is not None:
            self.export_control_class_number = export_control_class_number
        if htsus_code is not None:
            self.htsus_code = htsus_code
        if tariff_description is not None:
            self.tariff_description = tariff_description
        if moisture_sensitivity_level is not None:
            self.moisture_sensitivity_level = moisture_sensitivity_level
        if manufacturer_part_number is not None:
            self.manufacturer_part_number = manufacturer_part_number
        if minimum_order_quantity is not None:
            self.minimum_order_quantity = minimum_order_quantity
        if non_stock is not None:
            self.non_stock = non_stock
        if packaging is not None:
            self.packaging = packaging
        if quantity_available is not None:
            self.quantity_available = quantity_available
        if digi_key_part_number is not None:
            self.digi_key_part_number = digi_key_part_number
        if product_description is not None:
            self.product_description = product_description
        if unit_price is not None:
            self.unit_price = unit_price
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if manufacturer_public_quantity is not None:
            self.manufacturer_public_quantity = manufacturer_public_quantity
        if quantity_on_order is not None:
            self.quantity_on_order = quantity_on_order
        if dk_plus_restriction is not None:
            self.dk_plus_restriction = dk_plus_restriction
        if supplier_direct_ship is not None:
            self.supplier_direct_ship = supplier_direct_ship

    @property
    def my_pricing(self):
        """Gets the my_pricing of this ProductDetails.  # noqa: E501

        Your pricing for the account with which you authenticated. Also dependent on locale information.  # noqa: E501

        :return: The my_pricing of this ProductDetails.  # noqa: E501
        :rtype: list[PriceBreak]
        """
        return self._my_pricing

    @my_pricing.setter
    def my_pricing(self, my_pricing):
        """Sets the my_pricing of this ProductDetails.

        Your pricing for the account with which you authenticated. Also dependent on locale information.  # noqa: E501

        :param my_pricing: The my_pricing of this ProductDetails.  # noqa: E501
        :type: list[PriceBreak]
        """

        self._my_pricing = my_pricing

    @property
    def obsolete(self):
        """Gets the obsolete of this ProductDetails.  # noqa: E501

        Indicates whether this Part is obsolete.  # noqa: E501

        :return: The obsolete of this ProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._obsolete

    @obsolete.setter
    def obsolete(self, obsolete):
        """Sets the obsolete of this ProductDetails.

        Indicates whether this Part is obsolete.  # noqa: E501

        :param obsolete: The obsolete of this ProductDetails.  # noqa: E501
        :type: bool
        """

        self._obsolete = obsolete

    @property
    def media_links(self):
        """Gets the media_links of this ProductDetails.  # noqa: E501

        Collection of MediaLinks objects. These can contain links to datasheets, photos or manuals.  # noqa: E501

        :return: The media_links of this ProductDetails.  # noqa: E501
        :rtype: list[MediaLinks]
        """
        return self._media_links

    @media_links.setter
    def media_links(self, media_links):
        """Sets the media_links of this ProductDetails.

        Collection of MediaLinks objects. These can contain links to datasheets, photos or manuals.  # noqa: E501

        :param media_links: The media_links of this ProductDetails.  # noqa: E501
        :type: list[MediaLinks]
        """

        self._media_links = media_links

    @property
    def standard_package(self):
        """Gets the standard_package of this ProductDetails.  # noqa: E501

        The number of products in the manufacturer's standard package.  # noqa: E501

        :return: The standard_package of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._standard_package

    @standard_package.setter
    def standard_package(self, standard_package):
        """Sets the standard_package of this ProductDetails.

        The number of products in the manufacturer's standard package.  # noqa: E501

        :param standard_package: The standard_package of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._standard_package = standard_package

    @property
    def limited_taxonomy(self):
        """Gets the limited_taxonomy of this ProductDetails.  # noqa: E501


        :return: The limited_taxonomy of this ProductDetails.  # noqa: E501
        :rtype: LimitedTaxonomy
        """
        return self._limited_taxonomy

    @limited_taxonomy.setter
    def limited_taxonomy(self, limited_taxonomy):
        """Sets the limited_taxonomy of this ProductDetails.


        :param limited_taxonomy: The limited_taxonomy of this ProductDetails.  # noqa: E501
        :type: LimitedTaxonomy
        """

        self._limited_taxonomy = limited_taxonomy

    @property
    def kits(self):
        """Gets the kits of this ProductDetails.  # noqa: E501

        Kits that this product is contained in.  # noqa: E501

        :return: The kits of this ProductDetails.  # noqa: E501
        :rtype: list[AssociatedProduct]
        """
        return self._kits

    @kits.setter
    def kits(self, kits):
        """Sets the kits of this ProductDetails.

        Kits that this product is contained in.  # noqa: E501

        :param kits: The kits of this ProductDetails.  # noqa: E501
        :type: list[AssociatedProduct]
        """

        self._kits = kits

    @property
    def kit_contents(self):
        """Gets the kit_contents of this ProductDetails.  # noqa: E501

        Products contained within this product. Only applicable if this product is a kit.  # noqa: E501

        :return: The kit_contents of this ProductDetails.  # noqa: E501
        :rtype: list[KitPart]
        """
        return self._kit_contents

    @kit_contents.setter
    def kit_contents(self, kit_contents):
        """Sets the kit_contents of this ProductDetails.

        Products contained within this product. Only applicable if this product is a kit.  # noqa: E501

        :param kit_contents: The kit_contents of this ProductDetails.  # noqa: E501
        :type: list[KitPart]
        """

        self._kit_contents = kit_contents

    @property
    def mating_products(self):
        """Gets the mating_products of this ProductDetails.  # noqa: E501

        An association of same manufacturer products that mate with each other.  # noqa: E501

        :return: The mating_products of this ProductDetails.  # noqa: E501
        :rtype: list[AssociatedProduct]
        """
        return self._mating_products

    @mating_products.setter
    def mating_products(self, mating_products):
        """Sets the mating_products of this ProductDetails.

        An association of same manufacturer products that mate with each other.  # noqa: E501

        :param mating_products: The mating_products of this ProductDetails.  # noqa: E501
        :type: list[AssociatedProduct]
        """

        self._mating_products = mating_products

    @property
    def search_locale_used(self):
        """Gets the search_locale_used of this ProductDetails.  # noqa: E501


        :return: The search_locale_used of this ProductDetails.  # noqa: E501
        :rtype: IsoSearchLocale
        """
        return self._search_locale_used

    @search_locale_used.setter
    def search_locale_used(self, search_locale_used):
        """Sets the search_locale_used of this ProductDetails.


        :param search_locale_used: The search_locale_used of this ProductDetails.  # noqa: E501
        :type: IsoSearchLocale
        """

        self._search_locale_used = search_locale_used

    @property
    def associated_products(self):
        """Gets the associated_products of this ProductDetails.  # noqa: E501

        Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.  # noqa: E501

        :return: The associated_products of this ProductDetails.  # noqa: E501
        :rtype: list[AssociatedProduct]
        """
        return self._associated_products

    @associated_products.setter
    def associated_products(self, associated_products):
        """Sets the associated_products of this ProductDetails.

        Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.  # noqa: E501

        :param associated_products: The associated_products of this ProductDetails.  # noqa: E501
        :type: list[AssociatedProduct]
        """

        self._associated_products = associated_products

    @property
    def for_use_with_products(self):
        """Gets the for_use_with_products of this ProductDetails.  # noqa: E501

        Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.  # noqa: E501

        :return: The for_use_with_products of this ProductDetails.  # noqa: E501
        :rtype: list[AssociatedProduct]
        """
        return self._for_use_with_products

    @for_use_with_products.setter
    def for_use_with_products(self, for_use_with_products):
        """Sets the for_use_with_products of this ProductDetails.

        Products that are directly correlated to complete the intended function of the product. These products may be  either same manufacturer or differ.  # noqa: E501

        :param for_use_with_products: The for_use_with_products of this ProductDetails.  # noqa: E501
        :type: list[AssociatedProduct]
        """

        self._for_use_with_products = for_use_with_products

    @property
    def rohs_subs(self):
        """Gets the rohs_subs of this ProductDetails.  # noqa: E501

        Rohs substitutions  # noqa: E501

        :return: The rohs_subs of this ProductDetails.  # noqa: E501
        :rtype: list[AssociatedProduct]
        """
        return self._rohs_subs

    @rohs_subs.setter
    def rohs_subs(self, rohs_subs):
        """Sets the rohs_subs of this ProductDetails.

        Rohs substitutions  # noqa: E501

        :param rohs_subs: The rohs_subs of this ProductDetails.  # noqa: E501
        :type: list[AssociatedProduct]
        """

        self._rohs_subs = rohs_subs

    @property
    def suggested_subs(self):
        """Gets the suggested_subs of this ProductDetails.  # noqa: E501

        Suggested substitutions for when the product is obsolete.  # noqa: E501

        :return: The suggested_subs of this ProductDetails.  # noqa: E501
        :rtype: list[AssociatedProduct]
        """
        return self._suggested_subs

    @suggested_subs.setter
    def suggested_subs(self, suggested_subs):
        """Sets the suggested_subs of this ProductDetails.

        Suggested substitutions for when the product is obsolete.  # noqa: E501

        :param suggested_subs: The suggested_subs of this ProductDetails.  # noqa: E501
        :type: list[AssociatedProduct]
        """

        self._suggested_subs = suggested_subs

    @property
    def additional_value_fee(self):
        """Gets the additional_value_fee of this ProductDetails.  # noqa: E501

        Any additional value fee. Most commonly the Digi-Reel fee. May be used for programmable parts as well.  # noqa: E501

        :return: The additional_value_fee of this ProductDetails.  # noqa: E501
        :rtype: float
        """
        return self._additional_value_fee

    @additional_value_fee.setter
    def additional_value_fee(self, additional_value_fee):
        """Sets the additional_value_fee of this ProductDetails.

        Any additional value fee. Most commonly the Digi-Reel fee. May be used for programmable parts as well.  # noqa: E501

        :param additional_value_fee: The additional_value_fee of this ProductDetails.  # noqa: E501
        :type: float
        """

        self._additional_value_fee = additional_value_fee

    @property
    def reach_effective_date(self):
        """Gets the reach_effective_date of this ProductDetails.  # noqa: E501

        REACH effective date is string in format \"MMM-yyyy\" or blank \"\".  REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.  # noqa: E501

        :return: The reach_effective_date of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._reach_effective_date

    @reach_effective_date.setter
    def reach_effective_date(self, reach_effective_date):
        """Sets the reach_effective_date of this ProductDetails.

        REACH effective date is string in format \"MMM-yyyy\" or blank \"\".  REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.  # noqa: E501

        :param reach_effective_date: The reach_effective_date of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._reach_effective_date = reach_effective_date

    @property
    def standard_pricing(self):
        """Gets the standard_pricing of this ProductDetails.  # noqa: E501

        Standard pricing for the validated locale.  # noqa: E501

        :return: The standard_pricing of this ProductDetails.  # noqa: E501
        :rtype: list[PriceBreak]
        """
        return self._standard_pricing

    @standard_pricing.setter
    def standard_pricing(self, standard_pricing):
        """Sets the standard_pricing of this ProductDetails.

        Standard pricing for the validated locale.  # noqa: E501

        :param standard_pricing: The standard_pricing of this ProductDetails.  # noqa: E501
        :type: list[PriceBreak]
        """

        self._standard_pricing = standard_pricing

    @property
    def ro_hs_status(self):
        """Gets the ro_hs_status of this ProductDetails.  # noqa: E501

        RoHS status. Can be: RoHS Compliant, RoHS non-compliant, RoHS Compliant By Exemption, Not Applicable, Vendor  undefined, Request Inventory Verification, ROHS3 Compliant.  # noqa: E501

        :return: The ro_hs_status of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._ro_hs_status

    @ro_hs_status.setter
    def ro_hs_status(self, ro_hs_status):
        """Sets the ro_hs_status of this ProductDetails.

        RoHS status. Can be: RoHS Compliant, RoHS non-compliant, RoHS Compliant By Exemption, Not Applicable, Vendor  undefined, Request Inventory Verification, ROHS3 Compliant.  # noqa: E501

        :param ro_hs_status: The ro_hs_status of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._ro_hs_status = ro_hs_status

    @property
    def lead_status(self):
        """Gets the lead_status of this ProductDetails.  # noqa: E501

        Lead status. Can be: Lead Free, Contains lead, Lead Free By Exemption, Not Applicable, Vendor undefined, unknown,  or Request Inventory Verification.  # noqa: E501

        :return: The lead_status of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._lead_status

    @lead_status.setter
    def lead_status(self, lead_status):
        """Sets the lead_status of this ProductDetails.

        Lead status. Can be: Lead Free, Contains lead, Lead Free By Exemption, Not Applicable, Vendor undefined, unknown,  or Request Inventory Verification.  # noqa: E501

        :param lead_status: The lead_status of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._lead_status = lead_status

    @property
    def parameters(self):
        """Gets the parameters of this ProductDetails.  # noqa: E501

        Parameters for the part. Can be used for filtering keyword searches.  # noqa: E501

        :return: The parameters of this ProductDetails.  # noqa: E501
        :rtype: list[PidVid]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ProductDetails.

        Parameters for the part. Can be used for filtering keyword searches.  # noqa: E501

        :param parameters: The parameters of this ProductDetails.  # noqa: E501
        :type: list[PidVid]
        """

        self._parameters = parameters

    @property
    def product_url(self):
        """Gets the product_url of this ProductDetails.  # noqa: E501

        Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.  # noqa: E501

        :return: The product_url of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this ProductDetails.

        Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.  # noqa: E501

        :param product_url: The product_url of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._product_url = product_url

    @property
    def primary_datasheet(self):
        """Gets the primary_datasheet of this ProductDetails.  # noqa: E501

        The URL to the product's datasheet.  # noqa: E501

        :return: The primary_datasheet of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary_datasheet

    @primary_datasheet.setter
    def primary_datasheet(self, primary_datasheet):
        """Sets the primary_datasheet of this ProductDetails.

        The URL to the product's datasheet.  # noqa: E501

        :param primary_datasheet: The primary_datasheet of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._primary_datasheet = primary_datasheet

    @property
    def primary_photo(self):
        """Gets the primary_photo of this ProductDetails.  # noqa: E501

        The URL to the product's image.  # noqa: E501

        :return: The primary_photo of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary_photo

    @primary_photo.setter
    def primary_photo(self, primary_photo):
        """Sets the primary_photo of this ProductDetails.

        The URL to the product's image.  # noqa: E501

        :param primary_photo: The primary_photo of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._primary_photo = primary_photo

    @property
    def primary_video(self):
        """Gets the primary_video of this ProductDetails.  # noqa: E501

        The URL to the product's video.  # noqa: E501

        :return: The primary_video of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary_video

    @primary_video.setter
    def primary_video(self, primary_video):
        """Sets the primary_video of this ProductDetails.

        The URL to the product's video.  # noqa: E501

        :param primary_video: The primary_video of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._primary_video = primary_video

    @property
    def series(self):
        """Gets the series of this ProductDetails.  # noqa: E501


        :return: The series of this ProductDetails.  # noqa: E501
        :rtype: PidVid
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this ProductDetails.


        :param series: The series of this ProductDetails.  # noqa: E501
        :type: PidVid
        """

        self._series = series

    @property
    def manufacturer_lead_weeks(self):
        """Gets the manufacturer_lead_weeks of this ProductDetails.  # noqa: E501

        The number of weeks expected to receive stock from manufacturer.  # noqa: E501

        :return: The manufacturer_lead_weeks of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_lead_weeks

    @manufacturer_lead_weeks.setter
    def manufacturer_lead_weeks(self, manufacturer_lead_weeks):
        """Sets the manufacturer_lead_weeks of this ProductDetails.

        The number of weeks expected to receive stock from manufacturer.  # noqa: E501

        :param manufacturer_lead_weeks: The manufacturer_lead_weeks of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._manufacturer_lead_weeks = manufacturer_lead_weeks

    @property
    def manufacturer_page_url(self):
        """Gets the manufacturer_page_url of this ProductDetails.  # noqa: E501

        The URL to Digi-Key's page on the manufacturer.  # noqa: E501

        :return: The manufacturer_page_url of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_page_url

    @manufacturer_page_url.setter
    def manufacturer_page_url(self, manufacturer_page_url):
        """Sets the manufacturer_page_url of this ProductDetails.

        The URL to Digi-Key's page on the manufacturer.  # noqa: E501

        :param manufacturer_page_url: The manufacturer_page_url of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._manufacturer_page_url = manufacturer_page_url

    @property
    def product_status(self):
        """Gets the product_status of this ProductDetails.  # noqa: E501

        Status of the product. Options include: Active, Obsolete, Discontinued at Digi-Key, Last Time Buy, Not For New  Designs, Preliminary. For obsolete parts the part will become a non-stocking item when stock is depleted; minimums  will apply. Order the quantity available or the quantity available plus a multiple of the minimum order quantity.  # noqa: E501

        :return: The product_status of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_status

    @product_status.setter
    def product_status(self, product_status):
        """Sets the product_status of this ProductDetails.

        Status of the product. Options include: Active, Obsolete, Discontinued at Digi-Key, Last Time Buy, Not For New  Designs, Preliminary. For obsolete parts the part will become a non-stocking item when stock is depleted; minimums  will apply. Order the quantity available or the quantity available plus a multiple of the minimum order quantity.  # noqa: E501

        :param product_status: The product_status of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._product_status = product_status

    @property
    def date_last_buy_chance(self):
        """Gets the date_last_buy_chance of this ProductDetails.  # noqa: E501

        Last date that the product will be available for purchase. Date is in ISO 8601.  # noqa: E501

        :return: The date_last_buy_chance of this ProductDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_buy_chance

    @date_last_buy_chance.setter
    def date_last_buy_chance(self, date_last_buy_chance):
        """Sets the date_last_buy_chance of this ProductDetails.

        Last date that the product will be available for purchase. Date is in ISO 8601.  # noqa: E501

        :param date_last_buy_chance: The date_last_buy_chance of this ProductDetails.  # noqa: E501
        :type: datetime
        """

        self._date_last_buy_chance = date_last_buy_chance

    @property
    def alternate_packaging(self):
        """Gets the alternate_packaging of this ProductDetails.  # noqa: E501

        Other packaging types available for this product.  # noqa: E501

        :return: The alternate_packaging of this ProductDetails.  # noqa: E501
        :rtype: list[BasicProduct]
        """
        return self._alternate_packaging

    @alternate_packaging.setter
    def alternate_packaging(self, alternate_packaging):
        """Sets the alternate_packaging of this ProductDetails.

        Other packaging types available for this product.  # noqa: E501

        :param alternate_packaging: The alternate_packaging of this ProductDetails.  # noqa: E501
        :type: list[BasicProduct]
        """

        self._alternate_packaging = alternate_packaging

    @property
    def detailed_description(self):
        """Gets the detailed_description of this ProductDetails.  # noqa: E501

        Extended catalog description of the product.  # noqa: E501

        :return: The detailed_description of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._detailed_description

    @detailed_description.setter
    def detailed_description(self, detailed_description):
        """Sets the detailed_description of this ProductDetails.

        Extended catalog description of the product.  # noqa: E501

        :param detailed_description: The detailed_description of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._detailed_description = detailed_description

    @property
    def reach_status(self):
        """Gets the reach_status of this ProductDetails.  # noqa: E501

        REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.  # noqa: E501

        :return: The reach_status of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._reach_status

    @reach_status.setter
    def reach_status(self, reach_status):
        """Sets the reach_status of this ProductDetails.

        REACH is a regulation of the European Union. See documentation from the European Chemicals Agency.  # noqa: E501

        :param reach_status: The reach_status of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._reach_status = reach_status

    @property
    def export_control_class_number(self):
        """Gets the export_control_class_number of this ProductDetails.  # noqa: E501

        Export control class number. See documentation from the U.S. Department of Commerce.  # noqa: E501

        :return: The export_control_class_number of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._export_control_class_number

    @export_control_class_number.setter
    def export_control_class_number(self, export_control_class_number):
        """Sets the export_control_class_number of this ProductDetails.

        Export control class number. See documentation from the U.S. Department of Commerce.  # noqa: E501

        :param export_control_class_number: The export_control_class_number of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._export_control_class_number = export_control_class_number

    @property
    def htsus_code(self):
        """Gets the htsus_code of this ProductDetails.  # noqa: E501

        Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.  # noqa: E501

        :return: The htsus_code of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._htsus_code

    @htsus_code.setter
    def htsus_code(self, htsus_code):
        """Sets the htsus_code of this ProductDetails.

        Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.  # noqa: E501

        :param htsus_code: The htsus_code of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._htsus_code = htsus_code

    @property
    def tariff_description(self):
        """Gets the tariff_description of this ProductDetails.  # noqa: E501

        Description of the tariff status. Only applies if purchasing in USD and shipping to the US. Valid options are No  Tariff and Tariff Applied.  # noqa: E501

        :return: The tariff_description of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._tariff_description

    @tariff_description.setter
    def tariff_description(self, tariff_description):
        """Sets the tariff_description of this ProductDetails.

        Description of the tariff status. Only applies if purchasing in USD and shipping to the US. Valid options are No  Tariff and Tariff Applied.  # noqa: E501

        :param tariff_description: The tariff_description of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._tariff_description = tariff_description

    @property
    def moisture_sensitivity_level(self):
        """Gets the moisture_sensitivity_level of this ProductDetails.  # noqa: E501

        Code for Moisture Sensitivity Level of the product  # noqa: E501

        :return: The moisture_sensitivity_level of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._moisture_sensitivity_level

    @moisture_sensitivity_level.setter
    def moisture_sensitivity_level(self, moisture_sensitivity_level):
        """Sets the moisture_sensitivity_level of this ProductDetails.

        Code for Moisture Sensitivity Level of the product  # noqa: E501

        :param moisture_sensitivity_level: The moisture_sensitivity_level of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._moisture_sensitivity_level = moisture_sensitivity_level

    @property
    def manufacturer_part_number(self):
        """Gets the manufacturer_part_number of this ProductDetails.  # noqa: E501

        The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts.  # noqa: E501

        :return: The manufacturer_part_number of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_part_number

    @manufacturer_part_number.setter
    def manufacturer_part_number(self, manufacturer_part_number):
        """Sets the manufacturer_part_number of this ProductDetails.

        The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for  different parts.  # noqa: E501

        :param manufacturer_part_number: The manufacturer_part_number of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._manufacturer_part_number = manufacturer_part_number

    @property
    def minimum_order_quantity(self):
        """Gets the minimum_order_quantity of this ProductDetails.  # noqa: E501

        The minimum quantity to order from Digi-Key.  # noqa: E501

        :return: The minimum_order_quantity of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._minimum_order_quantity

    @minimum_order_quantity.setter
    def minimum_order_quantity(self, minimum_order_quantity):
        """Sets the minimum_order_quantity of this ProductDetails.

        The minimum quantity to order from Digi-Key.  # noqa: E501

        :param minimum_order_quantity: The minimum_order_quantity of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._minimum_order_quantity = minimum_order_quantity

    @property
    def non_stock(self):
        """Gets the non_stock of this ProductDetails.  # noqa: E501

        Indicates this product is a non stock product.  # noqa: E501

        :return: The non_stock of this ProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._non_stock

    @non_stock.setter
    def non_stock(self, non_stock):
        """Sets the non_stock of this ProductDetails.

        Indicates this product is a non stock product.  # noqa: E501

        :param non_stock: The non_stock of this ProductDetails.  # noqa: E501
        :type: bool
        """

        self._non_stock = non_stock

    @property
    def packaging(self):
        """Gets the packaging of this ProductDetails.  # noqa: E501


        :return: The packaging of this ProductDetails.  # noqa: E501
        :rtype: PidVid
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this ProductDetails.


        :param packaging: The packaging of this ProductDetails.  # noqa: E501
        :type: PidVid
        """

        self._packaging = packaging

    @property
    def quantity_available(self):
        """Gets the quantity_available of this ProductDetails.  # noqa: E501

        Quantity of the product available for immediate sale.  # noqa: E501

        :return: The quantity_available of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this ProductDetails.

        Quantity of the product available for immediate sale.  # noqa: E501

        :param quantity_available: The quantity_available of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._quantity_available = quantity_available

    @property
    def digi_key_part_number(self):
        """Gets the digi_key_part_number of this ProductDetails.  # noqa: E501

        The Digi-Key part number.  # noqa: E501

        :return: The digi_key_part_number of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_part_number

    @digi_key_part_number.setter
    def digi_key_part_number(self, digi_key_part_number):
        """Sets the digi_key_part_number of this ProductDetails.

        The Digi-Key part number.  # noqa: E501

        :param digi_key_part_number: The digi_key_part_number of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._digi_key_part_number = digi_key_part_number

    @property
    def product_description(self):
        """Gets the product_description of this ProductDetails.  # noqa: E501

        Catalog description of the product.  # noqa: E501

        :return: The product_description of this ProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this ProductDetails.

        Catalog description of the product.  # noqa: E501

        :param product_description: The product_description of this ProductDetails.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def unit_price(self):
        """Gets the unit_price of this ProductDetails.  # noqa: E501

        The price for a single unit of this product.  # noqa: E501

        :return: The unit_price of this ProductDetails.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ProductDetails.

        The price for a single unit of this product.  # noqa: E501

        :param unit_price: The unit_price of this ProductDetails.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductDetails.  # noqa: E501


        :return: The manufacturer of this ProductDetails.  # noqa: E501
        :rtype: PidVid
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductDetails.


        :param manufacturer: The manufacturer of this ProductDetails.  # noqa: E501
        :type: PidVid
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_public_quantity(self):
        """Gets the manufacturer_public_quantity of this ProductDetails.  # noqa: E501

        Quantity of this product available to order from manufacturer.  # noqa: E501

        :return: The manufacturer_public_quantity of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._manufacturer_public_quantity

    @manufacturer_public_quantity.setter
    def manufacturer_public_quantity(self, manufacturer_public_quantity):
        """Sets the manufacturer_public_quantity of this ProductDetails.

        Quantity of this product available to order from manufacturer.  # noqa: E501

        :param manufacturer_public_quantity: The manufacturer_public_quantity of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._manufacturer_public_quantity = manufacturer_public_quantity

    @property
    def quantity_on_order(self):
        """Gets the quantity_on_order of this ProductDetails.  # noqa: E501

        Quantity of this product ordered but not immediately available.  # noqa: E501

        :return: The quantity_on_order of this ProductDetails.  # noqa: E501
        :rtype: int
        """
        return self._quantity_on_order

    @quantity_on_order.setter
    def quantity_on_order(self, quantity_on_order):
        """Sets the quantity_on_order of this ProductDetails.

        Quantity of this product ordered but not immediately available.  # noqa: E501

        :param quantity_on_order: The quantity_on_order of this ProductDetails.  # noqa: E501
        :type: int
        """

        self._quantity_on_order = quantity_on_order

    @property
    def dk_plus_restriction(self):
        """Gets the dk_plus_restriction of this ProductDetails.  # noqa: E501

        If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site  # noqa: E501

        :return: The dk_plus_restriction of this ProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._dk_plus_restriction

    @dk_plus_restriction.setter
    def dk_plus_restriction(self, dk_plus_restriction):
        """Sets the dk_plus_restriction of this ProductDetails.

        If true- this product is not available for purchase through the Ordering API - it must be purchased through the  Digi-Key web site  # noqa: E501

        :param dk_plus_restriction: The dk_plus_restriction of this ProductDetails.  # noqa: E501
        :type: bool
        """

        self._dk_plus_restriction = dk_plus_restriction

    @property
    def supplier_direct_ship(self):
        """Gets the supplier_direct_ship of this ProductDetails.  # noqa: E501

        If true- this product is shipped directly from the Supplier  # noqa: E501

        :return: The supplier_direct_ship of this ProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._supplier_direct_ship

    @supplier_direct_ship.setter
    def supplier_direct_ship(self, supplier_direct_ship):
        """Sets the supplier_direct_ship of this ProductDetails.

        If true- this product is shipped directly from the Supplier  # noqa: E501

        :param supplier_direct_ship: The supplier_direct_ship of this ProductDetails.  # noqa: E501
        :type: bool
        """

        self._supplier_direct_ship = supplier_direct_ship

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
