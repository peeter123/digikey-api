# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_url': 'str',
        'description': 'str',
        'manufacturer': 'Manufacturer',
        'manufacturer_product_number': 'str',
        'unit_price': 'str',
        'quantity_available': 'int'
    }

    attribute_map = {
        'product_url': 'ProductUrl',
        'description': 'Description',
        'manufacturer': 'Manufacturer',
        'manufacturer_product_number': 'ManufacturerProductNumber',
        'unit_price': 'UnitPrice',
        'quantity_available': 'QuantityAvailable'
    }

    def __init__(self, product_url=None, description=None, manufacturer=None, manufacturer_product_number=None, unit_price=None, quantity_available=None):  # noqa: E501
        """ProductSummary - a model defined in Swagger"""  # noqa: E501
        self._product_url = None
        self._description = None
        self._manufacturer = None
        self._manufacturer_product_number = None
        self._unit_price = None
        self._quantity_available = None
        self.discriminator = None
        if product_url is not None:
            self.product_url = product_url
        if description is not None:
            self.description = description
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if manufacturer_product_number is not None:
            self.manufacturer_product_number = manufacturer_product_number
        if unit_price is not None:
            self.unit_price = unit_price
        if quantity_available is not None:
            self.quantity_available = quantity_available

    @property
    def product_url(self):
        """Gets the product_url of this ProductSummary.  # noqa: E501

        Product url  # noqa: E501

        :return: The product_url of this ProductSummary.  # noqa: E501
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this ProductSummary.

        Product url  # noqa: E501

        :param product_url: The product_url of this ProductSummary.  # noqa: E501
        :type: str
        """

        self._product_url = product_url

    @property
    def description(self):
        """Gets the description of this ProductSummary.  # noqa: E501

        Product Description  # noqa: E501

        :return: The description of this ProductSummary.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductSummary.

        Product Description  # noqa: E501

        :param description: The description of this ProductSummary.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductSummary.  # noqa: E501


        :return: The manufacturer of this ProductSummary.  # noqa: E501
        :rtype: Manufacturer
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductSummary.


        :param manufacturer: The manufacturer of this ProductSummary.  # noqa: E501
        :type: Manufacturer
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_product_number(self):
        """Gets the manufacturer_product_number of this ProductSummary.  # noqa: E501

        Manufacturer Product Number  # noqa: E501

        :return: The manufacturer_product_number of this ProductSummary.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_product_number

    @manufacturer_product_number.setter
    def manufacturer_product_number(self, manufacturer_product_number):
        """Sets the manufacturer_product_number of this ProductSummary.

        Manufacturer Product Number  # noqa: E501

        :param manufacturer_product_number: The manufacturer_product_number of this ProductSummary.  # noqa: E501
        :type: str
        """

        self._manufacturer_product_number = manufacturer_product_number

    @property
    def unit_price(self):
        """Gets the unit_price of this ProductSummary.  # noqa: E501

        Unit Price  # noqa: E501

        :return: The unit_price of this ProductSummary.  # noqa: E501
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ProductSummary.

        Unit Price  # noqa: E501

        :param unit_price: The unit_price of this ProductSummary.  # noqa: E501
        :type: str
        """

        self._unit_price = unit_price

    @property
    def quantity_available(self):
        """Gets the quantity_available of this ProductSummary.  # noqa: E501

        Quantity Available  # noqa: E501

        :return: The quantity_available of this ProductSummary.  # noqa: E501
        :rtype: int
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this ProductSummary.

        Quantity Available  # noqa: E501

        :param quantity_available: The quantity_available of this ProductSummary.  # noqa: E501
        :type: int
        """

        self._quantity_available = quantity_available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
