# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductAssociations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kits': 'list[ProductSummary]',
        'mating_products': 'list[ProductSummary]',
        'associated_products': 'list[ProductSummary]',
        'for_use_with_products': 'list[ProductSummary]'
    }

    attribute_map = {
        'kits': 'Kits',
        'mating_products': 'MatingProducts',
        'associated_products': 'AssociatedProducts',
        'for_use_with_products': 'ForUseWithProducts'
    }

    def __init__(self, kits=None, mating_products=None, associated_products=None, for_use_with_products=None):  # noqa: E501
        """ProductAssociations - a model defined in Swagger"""  # noqa: E501
        self._kits = None
        self._mating_products = None
        self._associated_products = None
        self._for_use_with_products = None
        self.discriminator = None
        if kits is not None:
            self.kits = kits
        if mating_products is not None:
            self.mating_products = mating_products
        if associated_products is not None:
            self.associated_products = associated_products
        if for_use_with_products is not None:
            self.for_use_with_products = for_use_with_products

    @property
    def kits(self):
        """Gets the kits of this ProductAssociations.  # noqa: E501

        Kits that this product is contained in.  # noqa: E501

        :return: The kits of this ProductAssociations.  # noqa: E501
        :rtype: list[ProductSummary]
        """
        return self._kits

    @kits.setter
    def kits(self, kits):
        """Sets the kits of this ProductAssociations.

        Kits that this product is contained in.  # noqa: E501

        :param kits: The kits of this ProductAssociations.  # noqa: E501
        :type: list[ProductSummary]
        """

        self._kits = kits

    @property
    def mating_products(self):
        """Gets the mating_products of this ProductAssociations.  # noqa: E501

        An association of same manufacturer products that mate with each other.  # noqa: E501

        :return: The mating_products of this ProductAssociations.  # noqa: E501
        :rtype: list[ProductSummary]
        """
        return self._mating_products

    @mating_products.setter
    def mating_products(self, mating_products):
        """Sets the mating_products of this ProductAssociations.

        An association of same manufacturer products that mate with each other.  # noqa: E501

        :param mating_products: The mating_products of this ProductAssociations.  # noqa: E501
        :type: list[ProductSummary]
        """

        self._mating_products = mating_products

    @property
    def associated_products(self):
        """Gets the associated_products of this ProductAssociations.  # noqa: E501

        Products that are directly correlated to complete the intended function of the product. These products may be either same manufacturer or differ.  # noqa: E501

        :return: The associated_products of this ProductAssociations.  # noqa: E501
        :rtype: list[ProductSummary]
        """
        return self._associated_products

    @associated_products.setter
    def associated_products(self, associated_products):
        """Sets the associated_products of this ProductAssociations.

        Products that are directly correlated to complete the intended function of the product. These products may be either same manufacturer or differ.  # noqa: E501

        :param associated_products: The associated_products of this ProductAssociations.  # noqa: E501
        :type: list[ProductSummary]
        """

        self._associated_products = associated_products

    @property
    def for_use_with_products(self):
        """Gets the for_use_with_products of this ProductAssociations.  # noqa: E501

        Products that are directly correlated to complete the intended function of th product. These products may be either same manufacturer or differ.  # noqa: E501

        :return: The for_use_with_products of this ProductAssociations.  # noqa: E501
        :rtype: list[ProductSummary]
        """
        return self._for_use_with_products

    @for_use_with_products.setter
    def for_use_with_products(self, for_use_with_products):
        """Sets the for_use_with_products of this ProductAssociations.

        Products that are directly correlated to complete the intended function of th product. These products may be either same manufacturer or differ.  # noqa: E501

        :param for_use_with_products: The for_use_with_products of this ProductAssociations.  # noqa: E501
        :type: list[ProductSummary]
        """

        self._for_use_with_products = for_use_with_products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductAssociations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductAssociations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
