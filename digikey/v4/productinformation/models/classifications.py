# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Classifications(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reach_status': 'str',
        'rohs_status': 'str',
        'moisture_sensitivity_level': 'str',
        'export_control_class_number': 'str',
        'htsus_code': 'str'
    }

    attribute_map = {
        'reach_status': 'ReachStatus',
        'rohs_status': 'RohsStatus',
        'moisture_sensitivity_level': 'MoistureSensitivityLevel',
        'export_control_class_number': 'ExportControlClassNumber',
        'htsus_code': 'HtsusCode'
    }

    def __init__(self, reach_status=None, rohs_status=None, moisture_sensitivity_level=None, export_control_class_number=None, htsus_code=None):  # noqa: E501
        """Classifications - a model defined in Swagger"""  # noqa: E501
        self._reach_status = None
        self._rohs_status = None
        self._moisture_sensitivity_level = None
        self._export_control_class_number = None
        self._htsus_code = None
        self.discriminator = None
        if reach_status is not None:
            self.reach_status = reach_status
        if rohs_status is not None:
            self.rohs_status = rohs_status
        if moisture_sensitivity_level is not None:
            self.moisture_sensitivity_level = moisture_sensitivity_level
        if export_control_class_number is not None:
            self.export_control_class_number = export_control_class_number
        if htsus_code is not None:
            self.htsus_code = htsus_code

    @property
    def reach_status(self):
        """Gets the reach_status of this Classifications.  # noqa: E501

        ReachStatus  # noqa: E501

        :return: The reach_status of this Classifications.  # noqa: E501
        :rtype: str
        """
        return self._reach_status

    @reach_status.setter
    def reach_status(self, reach_status):
        """Sets the reach_status of this Classifications.

        ReachStatus  # noqa: E501

        :param reach_status: The reach_status of this Classifications.  # noqa: E501
        :type: str
        """

        self._reach_status = reach_status

    @property
    def rohs_status(self):
        """Gets the rohs_status of this Classifications.  # noqa: E501

        RohsStatus  # noqa: E501

        :return: The rohs_status of this Classifications.  # noqa: E501
        :rtype: str
        """
        return self._rohs_status

    @rohs_status.setter
    def rohs_status(self, rohs_status):
        """Sets the rohs_status of this Classifications.

        RohsStatus  # noqa: E501

        :param rohs_status: The rohs_status of this Classifications.  # noqa: E501
        :type: str
        """

        self._rohs_status = rohs_status

    @property
    def moisture_sensitivity_level(self):
        """Gets the moisture_sensitivity_level of this Classifications.  # noqa: E501

        Code for Moisture Sensitivity Level of the product  # noqa: E501

        :return: The moisture_sensitivity_level of this Classifications.  # noqa: E501
        :rtype: str
        """
        return self._moisture_sensitivity_level

    @moisture_sensitivity_level.setter
    def moisture_sensitivity_level(self, moisture_sensitivity_level):
        """Sets the moisture_sensitivity_level of this Classifications.

        Code for Moisture Sensitivity Level of the product  # noqa: E501

        :param moisture_sensitivity_level: The moisture_sensitivity_level of this Classifications.  # noqa: E501
        :type: str
        """

        self._moisture_sensitivity_level = moisture_sensitivity_level

    @property
    def export_control_class_number(self):
        """Gets the export_control_class_number of this Classifications.  # noqa: E501

        Export control class number. See documentation from the U.S. Department of Commerce.  # noqa: E501

        :return: The export_control_class_number of this Classifications.  # noqa: E501
        :rtype: str
        """
        return self._export_control_class_number

    @export_control_class_number.setter
    def export_control_class_number(self, export_control_class_number):
        """Sets the export_control_class_number of this Classifications.

        Export control class number. See documentation from the U.S. Department of Commerce.  # noqa: E501

        :param export_control_class_number: The export_control_class_number of this Classifications.  # noqa: E501
        :type: str
        """

        self._export_control_class_number = export_control_class_number

    @property
    def htsus_code(self):
        """Gets the htsus_code of this Classifications.  # noqa: E501

        Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.  # noqa: E501

        :return: The htsus_code of this Classifications.  # noqa: E501
        :rtype: str
        """
        return self._htsus_code

    @htsus_code.setter
    def htsus_code(self, htsus_code):
        """Sets the htsus_code of this Classifications.

        Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.  # noqa: E501

        :param htsus_code: The htsus_code of this Classifications.  # noqa: E501
        :type: str
        """

        self._htsus_code = htsus_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Classifications, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Classifications):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
