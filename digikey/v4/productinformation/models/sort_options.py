# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SortOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'sort_order': 'str'
    }

    attribute_map = {
        'field': 'Field',
        'sort_order': 'SortOrder'
    }

    def __init__(self, field=None, sort_order=None):  # noqa: E501
        """SortOptions - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._sort_order = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def field(self):
        """Gets the field of this SortOptions.  # noqa: E501

        Field in response to sort by  # noqa: E501

        :return: The field of this SortOptions.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SortOptions.

        Field in response to sort by  # noqa: E501

        :param field: The field of this SortOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Packaging", "ProductStatus", "DigiKeyProductNumber", "ManufacturerProductNumber", "Manufacturer", "MinimumQuantity", "QuantityAvailable", "Price", "Supplier", "PriceManufacturerStandardPackage"]  # noqa: E501
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"  # noqa: E501
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def sort_order(self):
        """Gets the sort_order of this SortOptions.  # noqa: E501

        Direction to sort by Ascending or Descending  # noqa: E501

        :return: The sort_order of this SortOptions.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SortOptions.

        Direction to sort by Ascending or Descending  # noqa: E501

        :param sort_order: The sort_order of this SortOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ascending", "Descending"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SortOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SortOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
