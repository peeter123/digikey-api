# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KeywordResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'products': 'list[Product]',
        'products_count': 'int',
        'exact_matches': 'list[Product]',
        'filter_options': 'FilterOptions',
        'search_locale_used': 'IsoSearchLocale',
        'applied_parametric_filters_dto': 'list[Parameter]'
    }

    attribute_map = {
        'products': 'Products',
        'products_count': 'ProductsCount',
        'exact_matches': 'ExactMatches',
        'filter_options': 'FilterOptions',
        'search_locale_used': 'SearchLocaleUsed',
        'applied_parametric_filters_dto': 'AppliedParametricFiltersDto'
    }

    def __init__(self, products=None, products_count=None, exact_matches=None, filter_options=None, search_locale_used=None, applied_parametric_filters_dto=None):  # noqa: E501
        """KeywordResponse - a model defined in Swagger"""  # noqa: E501
        self._products = None
        self._products_count = None
        self._exact_matches = None
        self._filter_options = None
        self._search_locale_used = None
        self._applied_parametric_filters_dto = None
        self.discriminator = None
        if products is not None:
            self.products = products
        if products_count is not None:
            self.products_count = products_count
        if exact_matches is not None:
            self.exact_matches = exact_matches
        if filter_options is not None:
            self.filter_options = filter_options
        if search_locale_used is not None:
            self.search_locale_used = search_locale_used
        if applied_parametric_filters_dto is not None:
            self.applied_parametric_filters_dto = applied_parametric_filters_dto

    @property
    def products(self):
        """Gets the products of this KeywordResponse.  # noqa: E501


        :return: The products of this KeywordResponse.  # noqa: E501
        :rtype: list[Product]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this KeywordResponse.


        :param products: The products of this KeywordResponse.  # noqa: E501
        :type: list[Product]
        """

        self._products = products

    @property
    def products_count(self):
        """Gets the products_count of this KeywordResponse.  # noqa: E501

        Total number of matching products found.  # noqa: E501

        :return: The products_count of this KeywordResponse.  # noqa: E501
        :rtype: int
        """
        return self._products_count

    @products_count.setter
    def products_count(self, products_count):
        """Sets the products_count of this KeywordResponse.

        Total number of matching products found.  # noqa: E501

        :param products_count: The products_count of this KeywordResponse.  # noqa: E501
        :type: int
        """

        self._products_count = products_count

    @property
    def exact_matches(self):
        """Gets the exact_matches of this KeywordResponse.  # noqa: E501


        :return: The exact_matches of this KeywordResponse.  # noqa: E501
        :rtype: list[Product]
        """
        return self._exact_matches

    @exact_matches.setter
    def exact_matches(self, exact_matches):
        """Sets the exact_matches of this KeywordResponse.


        :param exact_matches: The exact_matches of this KeywordResponse.  # noqa: E501
        :type: list[Product]
        """

        self._exact_matches = exact_matches

    @property
    def filter_options(self):
        """Gets the filter_options of this KeywordResponse.  # noqa: E501


        :return: The filter_options of this KeywordResponse.  # noqa: E501
        :rtype: FilterOptions
        """
        return self._filter_options

    @filter_options.setter
    def filter_options(self, filter_options):
        """Sets the filter_options of this KeywordResponse.


        :param filter_options: The filter_options of this KeywordResponse.  # noqa: E501
        :type: FilterOptions
        """

        self._filter_options = filter_options

    @property
    def search_locale_used(self):
        """Gets the search_locale_used of this KeywordResponse.  # noqa: E501


        :return: The search_locale_used of this KeywordResponse.  # noqa: E501
        :rtype: IsoSearchLocale
        """
        return self._search_locale_used

    @search_locale_used.setter
    def search_locale_used(self, search_locale_used):
        """Sets the search_locale_used of this KeywordResponse.


        :param search_locale_used: The search_locale_used of this KeywordResponse.  # noqa: E501
        :type: IsoSearchLocale
        """

        self._search_locale_used = search_locale_used

    @property
    def applied_parametric_filters_dto(self):
        """Gets the applied_parametric_filters_dto of this KeywordResponse.  # noqa: E501


        :return: The applied_parametric_filters_dto of this KeywordResponse.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._applied_parametric_filters_dto

    @applied_parametric_filters_dto.setter
    def applied_parametric_filters_dto(self, applied_parametric_filters_dto):
        """Sets the applied_parametric_filters_dto of this KeywordResponse.


        :param applied_parametric_filters_dto: The applied_parametric_filters_dto of this KeywordResponse.  # noqa: E501
        :type: list[Parameter]
        """

        self._applied_parametric_filters_dto = applied_parametric_filters_dto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeywordResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeywordResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
