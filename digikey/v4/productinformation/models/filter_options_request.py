# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterOptionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manufacturer_filter': 'list[FilterId]',
        'category_filter': 'list[FilterId]',
        'status_filter': 'list[FilterId]',
        'packaging_filter': 'list[FilterId]',
        'market_place_filter': 'str',
        'series_filter': 'list[FilterId]',
        'minimum_quantity_available': 'int',
        'parameter_filter_request': 'ParameterFilterRequest',
        'search_options': 'list[str]'
    }

    attribute_map = {
        'manufacturer_filter': 'ManufacturerFilter',
        'category_filter': 'CategoryFilter',
        'status_filter': 'StatusFilter',
        'packaging_filter': 'PackagingFilter',
        'market_place_filter': 'MarketPlaceFilter',
        'series_filter': 'SeriesFilter',
        'minimum_quantity_available': 'MinimumQuantityAvailable',
        'parameter_filter_request': 'ParameterFilterRequest',
        'search_options': 'SearchOptions'
    }

    def __init__(self, manufacturer_filter=None, category_filter=None, status_filter=None, packaging_filter=None, market_place_filter=None, series_filter=None, minimum_quantity_available=None, parameter_filter_request=None, search_options=None):  # noqa: E501
        """FilterOptionsRequest - a model defined in Swagger"""  # noqa: E501
        self._manufacturer_filter = None
        self._category_filter = None
        self._status_filter = None
        self._packaging_filter = None
        self._market_place_filter = None
        self._series_filter = None
        self._minimum_quantity_available = None
        self._parameter_filter_request = None
        self._search_options = None
        self.discriminator = None
        if manufacturer_filter is not None:
            self.manufacturer_filter = manufacturer_filter
        if category_filter is not None:
            self.category_filter = category_filter
        if status_filter is not None:
            self.status_filter = status_filter
        if packaging_filter is not None:
            self.packaging_filter = packaging_filter
        if market_place_filter is not None:
            self.market_place_filter = market_place_filter
        if series_filter is not None:
            self.series_filter = series_filter
        if minimum_quantity_available is not None:
            self.minimum_quantity_available = minimum_quantity_available
        if parameter_filter_request is not None:
            self.parameter_filter_request = parameter_filter_request
        if search_options is not None:
            self.search_options = search_options

    @property
    def manufacturer_filter(self):
        """Gets the manufacturer_filter of this FilterOptionsRequest.  # noqa: E501

        Filter on Manufacturer  # noqa: E501

        :return: The manufacturer_filter of this FilterOptionsRequest.  # noqa: E501
        :rtype: list[FilterId]
        """
        return self._manufacturer_filter

    @manufacturer_filter.setter
    def manufacturer_filter(self, manufacturer_filter):
        """Sets the manufacturer_filter of this FilterOptionsRequest.

        Filter on Manufacturer  # noqa: E501

        :param manufacturer_filter: The manufacturer_filter of this FilterOptionsRequest.  # noqa: E501
        :type: list[FilterId]
        """

        self._manufacturer_filter = manufacturer_filter

    @property
    def category_filter(self):
        """Gets the category_filter of this FilterOptionsRequest.  # noqa: E501

        Category  # noqa: E501

        :return: The category_filter of this FilterOptionsRequest.  # noqa: E501
        :rtype: list[FilterId]
        """
        return self._category_filter

    @category_filter.setter
    def category_filter(self, category_filter):
        """Sets the category_filter of this FilterOptionsRequest.

        Category  # noqa: E501

        :param category_filter: The category_filter of this FilterOptionsRequest.  # noqa: E501
        :type: list[FilterId]
        """

        self._category_filter = category_filter

    @property
    def status_filter(self):
        """Gets the status_filter of this FilterOptionsRequest.  # noqa: E501

        Status  # noqa: E501

        :return: The status_filter of this FilterOptionsRequest.  # noqa: E501
        :rtype: list[FilterId]
        """
        return self._status_filter

    @status_filter.setter
    def status_filter(self, status_filter):
        """Sets the status_filter of this FilterOptionsRequest.

        Status  # noqa: E501

        :param status_filter: The status_filter of this FilterOptionsRequest.  # noqa: E501
        :type: list[FilterId]
        """

        self._status_filter = status_filter

    @property
    def packaging_filter(self):
        """Gets the packaging_filter of this FilterOptionsRequest.  # noqa: E501

        Packaging  # noqa: E501

        :return: The packaging_filter of this FilterOptionsRequest.  # noqa: E501
        :rtype: list[FilterId]
        """
        return self._packaging_filter

    @packaging_filter.setter
    def packaging_filter(self, packaging_filter):
        """Sets the packaging_filter of this FilterOptionsRequest.

        Packaging  # noqa: E501

        :param packaging_filter: The packaging_filter of this FilterOptionsRequest.  # noqa: E501
        :type: list[FilterId]
        """

        self._packaging_filter = packaging_filter

    @property
    def market_place_filter(self):
        """Gets the market_place_filter of this FilterOptionsRequest.  # noqa: E501

        MarketPlaceFilter  # noqa: E501

        :return: The market_place_filter of this FilterOptionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._market_place_filter

    @market_place_filter.setter
    def market_place_filter(self, market_place_filter):
        """Sets the market_place_filter of this FilterOptionsRequest.

        MarketPlaceFilter  # noqa: E501

        :param market_place_filter: The market_place_filter of this FilterOptionsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoFilter", "ExcludeMarketPlace", "MarketPlaceOnly"]  # noqa: E501
        if market_place_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `market_place_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(market_place_filter, allowed_values)
            )

        self._market_place_filter = market_place_filter

    @property
    def series_filter(self):
        """Gets the series_filter of this FilterOptionsRequest.  # noqa: E501

        SeriesFilter  # noqa: E501

        :return: The series_filter of this FilterOptionsRequest.  # noqa: E501
        :rtype: list[FilterId]
        """
        return self._series_filter

    @series_filter.setter
    def series_filter(self, series_filter):
        """Sets the series_filter of this FilterOptionsRequest.

        SeriesFilter  # noqa: E501

        :param series_filter: The series_filter of this FilterOptionsRequest.  # noqa: E501
        :type: list[FilterId]
        """

        self._series_filter = series_filter

    @property
    def minimum_quantity_available(self):
        """Gets the minimum_quantity_available of this FilterOptionsRequest.  # noqa: E501

        The MinimumQuantityAvailable for the result to display  # noqa: E501

        :return: The minimum_quantity_available of this FilterOptionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._minimum_quantity_available

    @minimum_quantity_available.setter
    def minimum_quantity_available(self, minimum_quantity_available):
        """Sets the minimum_quantity_available of this FilterOptionsRequest.

        The MinimumQuantityAvailable for the result to display  # noqa: E501

        :param minimum_quantity_available: The minimum_quantity_available of this FilterOptionsRequest.  # noqa: E501
        :type: int
        """

        self._minimum_quantity_available = minimum_quantity_available

    @property
    def parameter_filter_request(self):
        """Gets the parameter_filter_request of this FilterOptionsRequest.  # noqa: E501


        :return: The parameter_filter_request of this FilterOptionsRequest.  # noqa: E501
        :rtype: ParameterFilterRequest
        """
        return self._parameter_filter_request

    @parameter_filter_request.setter
    def parameter_filter_request(self, parameter_filter_request):
        """Sets the parameter_filter_request of this FilterOptionsRequest.


        :param parameter_filter_request: The parameter_filter_request of this FilterOptionsRequest.  # noqa: E501
        :type: ParameterFilterRequest
        """

        self._parameter_filter_request = parameter_filter_request

    @property
    def search_options(self):
        """Gets the search_options of this FilterOptionsRequest.  # noqa: E501

        /SearchOptions  # noqa: E501

        :return: The search_options of this FilterOptionsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_options

    @search_options.setter
    def search_options(self, search_options):
        """Sets the search_options of this FilterOptionsRequest.

        /SearchOptions  # noqa: E501

        :param search_options: The search_options of this FilterOptionsRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ChipOutpost", "Has3DModel", "HasCadModel", "HasDatasheet", "HasProductPhoto", "InStock", "NewProduct", "NonRohsCompliant", "NormallyStocking", "RohsCompliant"]  # noqa: E501
        if not set(search_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `search_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(search_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._search_options = search_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterOptionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterOptionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
