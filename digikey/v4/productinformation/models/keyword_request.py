# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KeywordRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keywords': 'str',
        'limit': 'int',
        'offset': 'int',
        'filter_options_request': 'FilterOptionsRequest',
        'sort_options': 'SortOptions'
    }

    attribute_map = {
        'keywords': 'Keywords',
        'limit': 'Limit',
        'offset': 'Offset',
        'filter_options_request': 'FilterOptionsRequest',
        'sort_options': 'SortOptions'
    }

    def __init__(self, keywords=None, limit=None, offset=None, filter_options_request=None, sort_options=None):  # noqa: E501
        """KeywordRequest - a model defined in Swagger"""  # noqa: E501
        self._keywords = None
        self._limit = None
        self._offset = None
        self._filter_options_request = None
        self._sort_options = None
        self.discriminator = None
        if keywords is not None:
            self.keywords = keywords
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if filter_options_request is not None:
            self.filter_options_request = filter_options_request
        if sort_options is not None:
            self.sort_options = sort_options

    @property
    def keywords(self):
        """Gets the keywords of this KeywordRequest.  # noqa: E501

        A String of Keywords, up to 250 characters  # noqa: E501

        :return: The keywords of this KeywordRequest.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this KeywordRequest.

        A String of Keywords, up to 250 characters  # noqa: E501

        :param keywords: The keywords of this KeywordRequest.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def limit(self):
        """Gets the limit of this KeywordRequest.  # noqa: E501

        Number of products to return between 1 and 50.  # noqa: E501

        :return: The limit of this KeywordRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this KeywordRequest.

        Number of products to return between 1 and 50.  # noqa: E501

        :param limit: The limit of this KeywordRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this KeywordRequest.  # noqa: E501

        The starting index of the records returned. This is used to paginate beyond RecordCount number of results.  # noqa: E501

        :return: The offset of this KeywordRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this KeywordRequest.

        The starting index of the records returned. This is used to paginate beyond RecordCount number of results.  # noqa: E501

        :param offset: The offset of this KeywordRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def filter_options_request(self):
        """Gets the filter_options_request of this KeywordRequest.  # noqa: E501


        :return: The filter_options_request of this KeywordRequest.  # noqa: E501
        :rtype: FilterOptionsRequest
        """
        return self._filter_options_request

    @filter_options_request.setter
    def filter_options_request(self, filter_options_request):
        """Sets the filter_options_request of this KeywordRequest.


        :param filter_options_request: The filter_options_request of this KeywordRequest.  # noqa: E501
        :type: FilterOptionsRequest
        """

        self._filter_options_request = filter_options_request

    @property
    def sort_options(self):
        """Gets the sort_options of this KeywordRequest.  # noqa: E501


        :return: The sort_options of this KeywordRequest.  # noqa: E501
        :rtype: SortOptions
        """
        return self._sort_options

    @sort_options.setter
    def sort_options(self, sort_options):
        """Sets the sort_options of this KeywordRequest.


        :param sort_options: The sort_options of this KeywordRequest.  # noqa: E501
        :type: SortOptions
        """

        self._sort_options = sort_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeywordRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeywordRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
