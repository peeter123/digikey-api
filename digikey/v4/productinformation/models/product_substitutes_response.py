# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductSubstitutesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_substitutes_count': 'int',
        'product_substitutes': 'list[ProductSubstitute]',
        'search_locale_used': 'IsoSearchLocale'
    }

    attribute_map = {
        'product_substitutes_count': 'ProductSubstitutesCount',
        'product_substitutes': 'ProductSubstitutes',
        'search_locale_used': 'SearchLocaleUsed'
    }

    def __init__(self, product_substitutes_count=None, product_substitutes=None, search_locale_used=None):  # noqa: E501
        """ProductSubstitutesResponse - a model defined in Swagger"""  # noqa: E501
        self._product_substitutes_count = None
        self._product_substitutes = None
        self._search_locale_used = None
        self.discriminator = None
        if product_substitutes_count is not None:
            self.product_substitutes_count = product_substitutes_count
        if product_substitutes is not None:
            self.product_substitutes = product_substitutes
        if search_locale_used is not None:
            self.search_locale_used = search_locale_used

    @property
    def product_substitutes_count(self):
        """Gets the product_substitutes_count of this ProductSubstitutesResponse.  # noqa: E501

        Count of ProductSubstitutes  # noqa: E501

        :return: The product_substitutes_count of this ProductSubstitutesResponse.  # noqa: E501
        :rtype: int
        """
        return self._product_substitutes_count

    @product_substitutes_count.setter
    def product_substitutes_count(self, product_substitutes_count):
        """Sets the product_substitutes_count of this ProductSubstitutesResponse.

        Count of ProductSubstitutes  # noqa: E501

        :param product_substitutes_count: The product_substitutes_count of this ProductSubstitutesResponse.  # noqa: E501
        :type: int
        """

        self._product_substitutes_count = product_substitutes_count

    @property
    def product_substitutes(self):
        """Gets the product_substitutes of this ProductSubstitutesResponse.  # noqa: E501

        List of ProductSubstitutes  # noqa: E501

        :return: The product_substitutes of this ProductSubstitutesResponse.  # noqa: E501
        :rtype: list[ProductSubstitute]
        """
        return self._product_substitutes

    @product_substitutes.setter
    def product_substitutes(self, product_substitutes):
        """Sets the product_substitutes of this ProductSubstitutesResponse.

        List of ProductSubstitutes  # noqa: E501

        :param product_substitutes: The product_substitutes of this ProductSubstitutesResponse.  # noqa: E501
        :type: list[ProductSubstitute]
        """

        self._product_substitutes = product_substitutes

    @property
    def search_locale_used(self):
        """Gets the search_locale_used of this ProductSubstitutesResponse.  # noqa: E501


        :return: The search_locale_used of this ProductSubstitutesResponse.  # noqa: E501
        :rtype: IsoSearchLocale
        """
        return self._search_locale_used

    @search_locale_used.setter
    def search_locale_used(self, search_locale_used):
        """Sets the search_locale_used of this ProductSubstitutesResponse.


        :param search_locale_used: The search_locale_used of this ProductSubstitutesResponse.  # noqa: E501
        :type: IsoSearchLocale
        """

        self._search_locale_used = search_locale_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSubstitutesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSubstitutesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
