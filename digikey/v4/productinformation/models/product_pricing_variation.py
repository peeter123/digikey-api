# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductPricingVariation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digi_key_product_number': 'str',
        'quantity_availablefor_package_type': 'int',
        'package_type': 'PackageType',
        'market_place': 'bool',
        'standard_pricing': 'list[PriceBreak]',
        'my_pricing': 'list[PriceBreak]',
        'is_tariff_active': 'bool',
        'digi_reeling_fee': 'float'
    }

    attribute_map = {
        'digi_key_product_number': 'DigiKeyProductNumber',
        'quantity_availablefor_package_type': 'QuantityAvailableforPackageType',
        'package_type': 'PackageType',
        'market_place': 'MarketPlace',
        'standard_pricing': 'StandardPricing',
        'my_pricing': 'MyPricing',
        'is_tariff_active': 'IsTariffActive',
        'digi_reeling_fee': 'DigiReelingFee'
    }

    def __init__(self, digi_key_product_number=None, quantity_availablefor_package_type=None, package_type=None, market_place=None, standard_pricing=None, my_pricing=None, is_tariff_active=None, digi_reeling_fee=None):  # noqa: E501
        """ProductPricingVariation - a model defined in Swagger"""  # noqa: E501
        self._digi_key_product_number = None
        self._quantity_availablefor_package_type = None
        self._package_type = None
        self._market_place = None
        self._standard_pricing = None
        self._my_pricing = None
        self._is_tariff_active = None
        self._digi_reeling_fee = None
        self.discriminator = None
        if digi_key_product_number is not None:
            self.digi_key_product_number = digi_key_product_number
        if quantity_availablefor_package_type is not None:
            self.quantity_availablefor_package_type = quantity_availablefor_package_type
        if package_type is not None:
            self.package_type = package_type
        if market_place is not None:
            self.market_place = market_place
        if standard_pricing is not None:
            self.standard_pricing = standard_pricing
        if my_pricing is not None:
            self.my_pricing = my_pricing
        if is_tariff_active is not None:
            self.is_tariff_active = is_tariff_active
        if digi_reeling_fee is not None:
            self.digi_reeling_fee = digi_reeling_fee

    @property
    def digi_key_product_number(self):
        """Gets the digi_key_product_number of this ProductPricingVariation.  # noqa: E501

        DigiKey Product number of the variation  # noqa: E501

        :return: The digi_key_product_number of this ProductPricingVariation.  # noqa: E501
        :rtype: str
        """
        return self._digi_key_product_number

    @digi_key_product_number.setter
    def digi_key_product_number(self, digi_key_product_number):
        """Sets the digi_key_product_number of this ProductPricingVariation.

        DigiKey Product number of the variation  # noqa: E501

        :param digi_key_product_number: The digi_key_product_number of this ProductPricingVariation.  # noqa: E501
        :type: str
        """

        self._digi_key_product_number = digi_key_product_number

    @property
    def quantity_availablefor_package_type(self):
        """Gets the quantity_availablefor_package_type of this ProductPricingVariation.  # noqa: E501

        The quantity available for the specified variation.  # noqa: E501

        :return: The quantity_availablefor_package_type of this ProductPricingVariation.  # noqa: E501
        :rtype: int
        """
        return self._quantity_availablefor_package_type

    @quantity_availablefor_package_type.setter
    def quantity_availablefor_package_type(self, quantity_availablefor_package_type):
        """Sets the quantity_availablefor_package_type of this ProductPricingVariation.

        The quantity available for the specified variation.  # noqa: E501

        :param quantity_availablefor_package_type: The quantity_availablefor_package_type of this ProductPricingVariation.  # noqa: E501
        :type: int
        """

        self._quantity_availablefor_package_type = quantity_availablefor_package_type

    @property
    def package_type(self):
        """Gets the package_type of this ProductPricingVariation.  # noqa: E501


        :return: The package_type of this ProductPricingVariation.  # noqa: E501
        :rtype: PackageType
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this ProductPricingVariation.


        :param package_type: The package_type of this ProductPricingVariation.  # noqa: E501
        :type: PackageType
        """

        self._package_type = package_type

    @property
    def market_place(self):
        """Gets the market_place of this ProductPricingVariation.  # noqa: E501

        Product is a Marketplace product that ships direct from the supplier. A separate shipping fee may apply  # noqa: E501

        :return: The market_place of this ProductPricingVariation.  # noqa: E501
        :rtype: bool
        """
        return self._market_place

    @market_place.setter
    def market_place(self, market_place):
        """Sets the market_place of this ProductPricingVariation.

        Product is a Marketplace product that ships direct from the supplier. A separate shipping fee may apply  # noqa: E501

        :param market_place: The market_place of this ProductPricingVariation.  # noqa: E501
        :type: bool
        """

        self._market_place = market_place

    @property
    def standard_pricing(self):
        """Gets the standard_pricing of this ProductPricingVariation.  # noqa: E501

        Standard pricing for the validated locale.  # noqa: E501

        :return: The standard_pricing of this ProductPricingVariation.  # noqa: E501
        :rtype: list[PriceBreak]
        """
        return self._standard_pricing

    @standard_pricing.setter
    def standard_pricing(self, standard_pricing):
        """Sets the standard_pricing of this ProductPricingVariation.

        Standard pricing for the validated locale.  # noqa: E501

        :param standard_pricing: The standard_pricing of this ProductPricingVariation.  # noqa: E501
        :type: list[PriceBreak]
        """

        self._standard_pricing = standard_pricing

    @property
    def my_pricing(self):
        """Gets the my_pricing of this ProductPricingVariation.  # noqa: E501

        Your pricing for the DigiKey customer number with which you authenticated. Also dependent on locale information.  # noqa: E501

        :return: The my_pricing of this ProductPricingVariation.  # noqa: E501
        :rtype: list[PriceBreak]
        """
        return self._my_pricing

    @my_pricing.setter
    def my_pricing(self, my_pricing):
        """Sets the my_pricing of this ProductPricingVariation.

        Your pricing for the DigiKey customer number with which you authenticated. Also dependent on locale information.  # noqa: E501

        :param my_pricing: The my_pricing of this ProductPricingVariation.  # noqa: E501
        :type: list[PriceBreak]
        """

        self._my_pricing = my_pricing

    @property
    def is_tariff_active(self):
        """Gets the is_tariff_active of this ProductPricingVariation.  # noqa: E501

        Indicates if tariff is active for variation  # noqa: E501

        :return: The is_tariff_active of this ProductPricingVariation.  # noqa: E501
        :rtype: bool
        """
        return self._is_tariff_active

    @is_tariff_active.setter
    def is_tariff_active(self, is_tariff_active):
        """Sets the is_tariff_active of this ProductPricingVariation.

        Indicates if tariff is active for variation  # noqa: E501

        :param is_tariff_active: The is_tariff_active of this ProductPricingVariation.  # noqa: E501
        :type: bool
        """

        self._is_tariff_active = is_tariff_active

    @property
    def digi_reeling_fee(self):
        """Gets the digi_reeling_fee of this ProductPricingVariation.  # noqa: E501

        Reeling fee per product ordered  # noqa: E501

        :return: The digi_reeling_fee of this ProductPricingVariation.  # noqa: E501
        :rtype: float
        """
        return self._digi_reeling_fee

    @digi_reeling_fee.setter
    def digi_reeling_fee(self, digi_reeling_fee):
        """Sets the digi_reeling_fee of this ProductPricingVariation.

        Reeling fee per product ordered  # noqa: E501

        :param digi_reeling_fee: The digi_reeling_fee of this ProductPricingVariation.  # noqa: E501
        :type: float
        """

        self._digi_reeling_fee = digi_reeling_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductPricingVariation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductPricingVariation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
