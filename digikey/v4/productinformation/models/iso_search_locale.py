# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IsoSearchLocale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site': 'str',
        'language': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'site': 'Site',
        'language': 'Language',
        'currency': 'Currency'
    }

    def __init__(self, site=None, language=None, currency=None):  # noqa: E501
        """IsoSearchLocale - a model defined in Swagger"""  # noqa: E501
        self._site = None
        self._language = None
        self._currency = None
        self.discriminator = None
        if site is not None:
            self.site = site
        if language is not None:
            self.language = language
        if currency is not None:
            self.currency = currency

    @property
    def site(self):
        """Gets the site of this IsoSearchLocale.  # noqa: E501

        The site we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values.  # noqa: E501

        :return: The site of this IsoSearchLocale.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this IsoSearchLocale.

        The site we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values.  # noqa: E501

        :param site: The site of this IsoSearchLocale.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def language(self):
        """Gets the language of this IsoSearchLocale.  # noqa: E501

        The language we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values or not valid for the entered site.  # noqa: E501

        :return: The language of this IsoSearchLocale.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this IsoSearchLocale.

        The language we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values or not valid for the entered site.  # noqa: E501

        :param language: The language of this IsoSearchLocale.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def currency(self):
        """Gets the currency of this IsoSearchLocale.  # noqa: E501

        The currency we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values or not valid for the entered site.  # noqa: E501

        :return: The currency of this IsoSearchLocale.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this IsoSearchLocale.

        The currency we used for the API call. Note this may be different than the value you entered if that value was not one of our allowed values or not valid for the entered site.  # noqa: E501

        :param currency: The currency of this IsoSearchLocale.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IsoSearchLocale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IsoSearchLocale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
