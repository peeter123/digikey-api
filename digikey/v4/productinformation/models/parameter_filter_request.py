# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParameterFilterRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_filter': 'FilterId',
        'parameter_filters': 'list[ParametricCategory]'
    }

    attribute_map = {
        'category_filter': 'CategoryFilter',
        'parameter_filters': 'ParameterFilters'
    }

    def __init__(self, category_filter=None, parameter_filters=None):  # noqa: E501
        """ParameterFilterRequest - a model defined in Swagger"""  # noqa: E501
        self._category_filter = None
        self._parameter_filters = None
        self.discriminator = None
        if category_filter is not None:
            self.category_filter = category_filter
        if parameter_filters is not None:
            self.parameter_filters = parameter_filters

    @property
    def category_filter(self):
        """Gets the category_filter of this ParameterFilterRequest.  # noqa: E501


        :return: The category_filter of this ParameterFilterRequest.  # noqa: E501
        :rtype: FilterId
        """
        return self._category_filter

    @category_filter.setter
    def category_filter(self, category_filter):
        """Sets the category_filter of this ParameterFilterRequest.


        :param category_filter: The category_filter of this ParameterFilterRequest.  # noqa: E501
        :type: FilterId
        """

        self._category_filter = category_filter

    @property
    def parameter_filters(self):
        """Gets the parameter_filters of this ParameterFilterRequest.  # noqa: E501

        The list of search parameters  # noqa: E501

        :return: The parameter_filters of this ParameterFilterRequest.  # noqa: E501
        :rtype: list[ParametricCategory]
        """
        return self._parameter_filters

    @parameter_filters.setter
    def parameter_filters(self, parameter_filters):
        """Sets the parameter_filters of this ParameterFilterRequest.

        The list of search parameters  # noqa: E501

        :param parameter_filters: The parameter_filters of this ParameterFilterRequest.  # noqa: E501
        :type: list[ParametricCategory]
        """

        self._parameter_filters = parameter_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParameterFilterRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterFilterRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
