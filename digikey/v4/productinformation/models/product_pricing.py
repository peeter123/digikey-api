# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductPricing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manufacturer_product_number': 'str',
        'manufacturer': 'Manufacturer',
        'description': 'Description',
        'quantity_available': 'int',
        'product_url': 'str',
        'is_discontinued': 'bool',
        'normally_stocking': 'bool',
        'is_obsolete': 'bool',
        'manufacturer_lead_weeks': 'str',
        'manufacturer_public_quantity': 'int',
        'standard_package': 'int',
        'export_control_class_number': 'str',
        'htsus_code': 'str',
        'moisture_sensitivity_level': 'str',
        'is_bo_not_allowed': 'bool',
        'is_ncnr': 'bool',
        'categories': 'list[CategoryType]',
        'contains_lithium': 'bool',
        'contains_mercury': 'bool',
        'is_end_of_life': 'bool',
        'product_variations': 'list[ProductPricingVariation]'
    }

    attribute_map = {
        'manufacturer_product_number': 'ManufacturerProductNumber',
        'manufacturer': 'Manufacturer',
        'description': 'Description',
        'quantity_available': 'QuantityAvailable',
        'product_url': 'ProductUrl',
        'is_discontinued': 'IsDiscontinued',
        'normally_stocking': 'NormallyStocking',
        'is_obsolete': 'IsObsolete',
        'manufacturer_lead_weeks': 'ManufacturerLeadWeeks',
        'manufacturer_public_quantity': 'ManufacturerPublicQuantity',
        'standard_package': 'StandardPackage',
        'export_control_class_number': 'ExportControlClassNumber',
        'htsus_code': 'HtsusCode',
        'moisture_sensitivity_level': 'MoistureSensitivityLevel',
        'is_bo_not_allowed': 'IsBoNotAllowed',
        'is_ncnr': 'IsNcnr',
        'categories': 'Categories',
        'contains_lithium': 'ContainsLithium',
        'contains_mercury': 'ContainsMercury',
        'is_end_of_life': 'IsEndOfLife',
        'product_variations': 'ProductVariations'
    }

    def __init__(self, manufacturer_product_number=None, manufacturer=None, description=None, quantity_available=None, product_url=None, is_discontinued=None, normally_stocking=None, is_obsolete=None, manufacturer_lead_weeks=None, manufacturer_public_quantity=None, standard_package=None, export_control_class_number=None, htsus_code=None, moisture_sensitivity_level=None, is_bo_not_allowed=None, is_ncnr=None, categories=None, contains_lithium=None, contains_mercury=None, is_end_of_life=None, product_variations=None):  # noqa: E501
        """ProductPricing - a model defined in Swagger"""  # noqa: E501
        self._manufacturer_product_number = None
        self._manufacturer = None
        self._description = None
        self._quantity_available = None
        self._product_url = None
        self._is_discontinued = None
        self._normally_stocking = None
        self._is_obsolete = None
        self._manufacturer_lead_weeks = None
        self._manufacturer_public_quantity = None
        self._standard_package = None
        self._export_control_class_number = None
        self._htsus_code = None
        self._moisture_sensitivity_level = None
        self._is_bo_not_allowed = None
        self._is_ncnr = None
        self._categories = None
        self._contains_lithium = None
        self._contains_mercury = None
        self._is_end_of_life = None
        self._product_variations = None
        self.discriminator = None
        if manufacturer_product_number is not None:
            self.manufacturer_product_number = manufacturer_product_number
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if description is not None:
            self.description = description
        if quantity_available is not None:
            self.quantity_available = quantity_available
        if product_url is not None:
            self.product_url = product_url
        if is_discontinued is not None:
            self.is_discontinued = is_discontinued
        if normally_stocking is not None:
            self.normally_stocking = normally_stocking
        if is_obsolete is not None:
            self.is_obsolete = is_obsolete
        if manufacturer_lead_weeks is not None:
            self.manufacturer_lead_weeks = manufacturer_lead_weeks
        if manufacturer_public_quantity is not None:
            self.manufacturer_public_quantity = manufacturer_public_quantity
        if standard_package is not None:
            self.standard_package = standard_package
        if export_control_class_number is not None:
            self.export_control_class_number = export_control_class_number
        if htsus_code is not None:
            self.htsus_code = htsus_code
        if moisture_sensitivity_level is not None:
            self.moisture_sensitivity_level = moisture_sensitivity_level
        if is_bo_not_allowed is not None:
            self.is_bo_not_allowed = is_bo_not_allowed
        if is_ncnr is not None:
            self.is_ncnr = is_ncnr
        if categories is not None:
            self.categories = categories
        if contains_lithium is not None:
            self.contains_lithium = contains_lithium
        if contains_mercury is not None:
            self.contains_mercury = contains_mercury
        if is_end_of_life is not None:
            self.is_end_of_life = is_end_of_life
        if product_variations is not None:
            self.product_variations = product_variations

    @property
    def manufacturer_product_number(self):
        """Gets the manufacturer_product_number of this ProductPricing.  # noqa: E501

        The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for different parts.  # noqa: E501

        :return: The manufacturer_product_number of this ProductPricing.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_product_number

    @manufacturer_product_number.setter
    def manufacturer_product_number(self, manufacturer_product_number):
        """Sets the manufacturer_product_number of this ProductPricing.

        The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for different parts.  # noqa: E501

        :param manufacturer_product_number: The manufacturer_product_number of this ProductPricing.  # noqa: E501
        :type: str
        """

        self._manufacturer_product_number = manufacturer_product_number

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductPricing.  # noqa: E501


        :return: The manufacturer of this ProductPricing.  # noqa: E501
        :rtype: Manufacturer
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductPricing.


        :param manufacturer: The manufacturer of this ProductPricing.  # noqa: E501
        :type: Manufacturer
        """

        self._manufacturer = manufacturer

    @property
    def description(self):
        """Gets the description of this ProductPricing.  # noqa: E501


        :return: The description of this ProductPricing.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductPricing.


        :param description: The description of this ProductPricing.  # noqa: E501
        :type: Description
        """

        self._description = description

    @property
    def quantity_available(self):
        """Gets the quantity_available of this ProductPricing.  # noqa: E501

        In-stock quantity that is available for immediate shipping.  # noqa: E501

        :return: The quantity_available of this ProductPricing.  # noqa: E501
        :rtype: int
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this ProductPricing.

        In-stock quantity that is available for immediate shipping.  # noqa: E501

        :param quantity_available: The quantity_available of this ProductPricing.  # noqa: E501
        :type: int
        """

        self._quantity_available = quantity_available

    @property
    def product_url(self):
        """Gets the product_url of this ProductPricing.  # noqa: E501

        Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.  # noqa: E501

        :return: The product_url of this ProductPricing.  # noqa: E501
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this ProductPricing.

        Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.  # noqa: E501

        :param product_url: The product_url of this ProductPricing.  # noqa: E501
        :type: str
        """

        self._product_url = product_url

    @property
    def is_discontinued(self):
        """Gets the is_discontinued of this ProductPricing.  # noqa: E501

        This product is no longer sold at DigiKey and will no longer be restocked.  # noqa: E501

        :return: The is_discontinued of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._is_discontinued

    @is_discontinued.setter
    def is_discontinued(self, is_discontinued):
        """Sets the is_discontinued of this ProductPricing.

        This product is no longer sold at DigiKey and will no longer be restocked.  # noqa: E501

        :param is_discontinued: The is_discontinued of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._is_discontinued = is_discontinued

    @property
    def normally_stocking(self):
        """Gets the normally_stocking of this ProductPricing.  # noqa: E501

        Indicates if a product is normally stocked.  # noqa: E501

        :return: The normally_stocking of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._normally_stocking

    @normally_stocking.setter
    def normally_stocking(self, normally_stocking):
        """Sets the normally_stocking of this ProductPricing.

        Indicates if a product is normally stocked.  # noqa: E501

        :param normally_stocking: The normally_stocking of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._normally_stocking = normally_stocking

    @property
    def is_obsolete(self):
        """Gets the is_obsolete of this ProductPricing.  # noqa: E501

        Product is obsolete  # noqa: E501

        :return: The is_obsolete of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._is_obsolete

    @is_obsolete.setter
    def is_obsolete(self, is_obsolete):
        """Sets the is_obsolete of this ProductPricing.

        Product is obsolete  # noqa: E501

        :param is_obsolete: The is_obsolete of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._is_obsolete = is_obsolete

    @property
    def manufacturer_lead_weeks(self):
        """Gets the manufacturer_lead_weeks of this ProductPricing.  # noqa: E501

        The number of weeks expected to receive stock from manufacturer to DigiKey.  # noqa: E501

        :return: The manufacturer_lead_weeks of this ProductPricing.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_lead_weeks

    @manufacturer_lead_weeks.setter
    def manufacturer_lead_weeks(self, manufacturer_lead_weeks):
        """Sets the manufacturer_lead_weeks of this ProductPricing.

        The number of weeks expected to receive stock from manufacturer to DigiKey.  # noqa: E501

        :param manufacturer_lead_weeks: The manufacturer_lead_weeks of this ProductPricing.  # noqa: E501
        :type: str
        """

        self._manufacturer_lead_weeks = manufacturer_lead_weeks

    @property
    def manufacturer_public_quantity(self):
        """Gets the manufacturer_public_quantity of this ProductPricing.  # noqa: E501

        The manufacturer’s factory stock that can be ordered and will ship once DigiKey receives it from the manufacturer.  # noqa: E501

        :return: The manufacturer_public_quantity of this ProductPricing.  # noqa: E501
        :rtype: int
        """
        return self._manufacturer_public_quantity

    @manufacturer_public_quantity.setter
    def manufacturer_public_quantity(self, manufacturer_public_quantity):
        """Sets the manufacturer_public_quantity of this ProductPricing.

        The manufacturer’s factory stock that can be ordered and will ship once DigiKey receives it from the manufacturer.  # noqa: E501

        :param manufacturer_public_quantity: The manufacturer_public_quantity of this ProductPricing.  # noqa: E501
        :type: int
        """

        self._manufacturer_public_quantity = manufacturer_public_quantity

    @property
    def standard_package(self):
        """Gets the standard_package of this ProductPricing.  # noqa: E501

        The number of products in the manufacturer's standard package.  # noqa: E501

        :return: The standard_package of this ProductPricing.  # noqa: E501
        :rtype: int
        """
        return self._standard_package

    @standard_package.setter
    def standard_package(self, standard_package):
        """Sets the standard_package of this ProductPricing.

        The number of products in the manufacturer's standard package.  # noqa: E501

        :param standard_package: The standard_package of this ProductPricing.  # noqa: E501
        :type: int
        """

        self._standard_package = standard_package

    @property
    def export_control_class_number(self):
        """Gets the export_control_class_number of this ProductPricing.  # noqa: E501

        Export control class number. See documentation from the U.S. Department of Commerce.  # noqa: E501

        :return: The export_control_class_number of this ProductPricing.  # noqa: E501
        :rtype: str
        """
        return self._export_control_class_number

    @export_control_class_number.setter
    def export_control_class_number(self, export_control_class_number):
        """Sets the export_control_class_number of this ProductPricing.

        Export control class number. See documentation from the U.S. Department of Commerce.  # noqa: E501

        :param export_control_class_number: The export_control_class_number of this ProductPricing.  # noqa: E501
        :type: str
        """

        self._export_control_class_number = export_control_class_number

    @property
    def htsus_code(self):
        """Gets the htsus_code of this ProductPricing.  # noqa: E501

        Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.  # noqa: E501

        :return: The htsus_code of this ProductPricing.  # noqa: E501
        :rtype: str
        """
        return self._htsus_code

    @htsus_code.setter
    def htsus_code(self, htsus_code):
        """Sets the htsus_code of this ProductPricing.

        Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.  # noqa: E501

        :param htsus_code: The htsus_code of this ProductPricing.  # noqa: E501
        :type: str
        """

        self._htsus_code = htsus_code

    @property
    def moisture_sensitivity_level(self):
        """Gets the moisture_sensitivity_level of this ProductPricing.  # noqa: E501

        Code for Moisture Sensitivity Level of the product  # noqa: E501

        :return: The moisture_sensitivity_level of this ProductPricing.  # noqa: E501
        :rtype: str
        """
        return self._moisture_sensitivity_level

    @moisture_sensitivity_level.setter
    def moisture_sensitivity_level(self, moisture_sensitivity_level):
        """Sets the moisture_sensitivity_level of this ProductPricing.

        Code for Moisture Sensitivity Level of the product  # noqa: E501

        :param moisture_sensitivity_level: The moisture_sensitivity_level of this ProductPricing.  # noqa: E501
        :type: str
        """

        self._moisture_sensitivity_level = moisture_sensitivity_level

    @property
    def is_bo_not_allowed(self):
        """Gets the is_bo_not_allowed of this ProductPricing.  # noqa: E501

        Is Back Order not allowed? True if you cannot place a backorder; false if we will allow the product to be back-ordered.  # noqa: E501

        :return: The is_bo_not_allowed of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._is_bo_not_allowed

    @is_bo_not_allowed.setter
    def is_bo_not_allowed(self, is_bo_not_allowed):
        """Sets the is_bo_not_allowed of this ProductPricing.

        Is Back Order not allowed? True if you cannot place a backorder; false if we will allow the product to be back-ordered.  # noqa: E501

        :param is_bo_not_allowed: The is_bo_not_allowed of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._is_bo_not_allowed = is_bo_not_allowed

    @property
    def is_ncnr(self):
        """Gets the is_ncnr of this ProductPricing.  # noqa: E501

        Is product non-cancellable and non-returnable  # noqa: E501

        :return: The is_ncnr of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._is_ncnr

    @is_ncnr.setter
    def is_ncnr(self, is_ncnr):
        """Sets the is_ncnr of this ProductPricing.

        Is product non-cancellable and non-returnable  # noqa: E501

        :param is_ncnr: The is_ncnr of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._is_ncnr = is_ncnr

    @property
    def categories(self):
        """Gets the categories of this ProductPricing.  # noqa: E501

        The main category that the part is in(this does not include sub categories)  # noqa: E501

        :return: The categories of this ProductPricing.  # noqa: E501
        :rtype: list[CategoryType]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ProductPricing.

        The main category that the part is in(this does not include sub categories)  # noqa: E501

        :param categories: The categories of this ProductPricing.  # noqa: E501
        :type: list[CategoryType]
        """

        self._categories = categories

    @property
    def contains_lithium(self):
        """Gets the contains_lithium of this ProductPricing.  # noqa: E501

        Indicates if product contains lithium  # noqa: E501

        :return: The contains_lithium of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._contains_lithium

    @contains_lithium.setter
    def contains_lithium(self, contains_lithium):
        """Sets the contains_lithium of this ProductPricing.

        Indicates if product contains lithium  # noqa: E501

        :param contains_lithium: The contains_lithium of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._contains_lithium = contains_lithium

    @property
    def contains_mercury(self):
        """Gets the contains_mercury of this ProductPricing.  # noqa: E501

        Indicates if product contains mercury  # noqa: E501

        :return: The contains_mercury of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._contains_mercury

    @contains_mercury.setter
    def contains_mercury(self, contains_mercury):
        """Sets the contains_mercury of this ProductPricing.

        Indicates if product contains mercury  # noqa: E501

        :param contains_mercury: The contains_mercury of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._contains_mercury = contains_mercury

    @property
    def is_end_of_life(self):
        """Gets the is_end_of_life of this ProductPricing.  # noqa: E501

        This product is no longer manufactured and will no longer be stocked once stock is depleted.  # noqa: E501

        :return: The is_end_of_life of this ProductPricing.  # noqa: E501
        :rtype: bool
        """
        return self._is_end_of_life

    @is_end_of_life.setter
    def is_end_of_life(self, is_end_of_life):
        """Sets the is_end_of_life of this ProductPricing.

        This product is no longer manufactured and will no longer be stocked once stock is depleted.  # noqa: E501

        :param is_end_of_life: The is_end_of_life of this ProductPricing.  # noqa: E501
        :type: bool
        """

        self._is_end_of_life = is_end_of_life

    @property
    def product_variations(self):
        """Gets the product_variations of this ProductPricing.  # noqa: E501

        Variations of the requested ProductPricing  # noqa: E501

        :return: The product_variations of this ProductPricing.  # noqa: E501
        :rtype: list[ProductPricingVariation]
        """
        return self._product_variations

    @product_variations.setter
    def product_variations(self, product_variations):
        """Sets the product_variations of this ProductPricing.

        Variations of the requested ProductPricing  # noqa: E501

        :param product_variations: The product_variations of this ProductPricing.  # noqa: E501
        :type: list[ProductPricingVariation]
        """

        self._product_variations = product_variations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductPricing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductPricing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
