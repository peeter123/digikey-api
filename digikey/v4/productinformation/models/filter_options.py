# coding: utf-8

"""
    ProductSearch Api

    ProductSearch Api  # noqa: E501

    OpenAPI spec version: v4
    Contact: dl_Agile_Team_B2B_API@digikey.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manufacturers': 'list[BaseFilterV4]',
        'packaging': 'list[BaseFilterV4]',
        'status': 'list[BaseFilterV4]',
        'series': 'list[BaseFilterV4]',
        'parametric_filters': 'list[ParameterFilterOptionsResponse]',
        'top_categories': 'list[TopCategory]',
        'market_place_filters': 'list[str]'
    }

    attribute_map = {
        'manufacturers': 'Manufacturers',
        'packaging': 'Packaging',
        'status': 'Status',
        'series': 'Series',
        'parametric_filters': 'ParametricFilters',
        'top_categories': 'TopCategories',
        'market_place_filters': 'MarketPlaceFilters'
    }

    def __init__(self, manufacturers=None, packaging=None, status=None, series=None, parametric_filters=None, top_categories=None, market_place_filters=None):  # noqa: E501
        """FilterOptions - a model defined in Swagger"""  # noqa: E501
        self._manufacturers = None
        self._packaging = None
        self._status = None
        self._series = None
        self._parametric_filters = None
        self._top_categories = None
        self._market_place_filters = None
        self.discriminator = None
        if manufacturers is not None:
            self.manufacturers = manufacturers
        if packaging is not None:
            self.packaging = packaging
        if status is not None:
            self.status = status
        if series is not None:
            self.series = series
        if parametric_filters is not None:
            self.parametric_filters = parametric_filters
        if top_categories is not None:
            self.top_categories = top_categories
        if market_place_filters is not None:
            self.market_place_filters = market_place_filters

    @property
    def manufacturers(self):
        """Gets the manufacturers of this FilterOptions.  # noqa: E501

        The Manufacturers that can be filtered to narrow next search request  # noqa: E501

        :return: The manufacturers of this FilterOptions.  # noqa: E501
        :rtype: list[BaseFilterV4]
        """
        return self._manufacturers

    @manufacturers.setter
    def manufacturers(self, manufacturers):
        """Sets the manufacturers of this FilterOptions.

        The Manufacturers that can be filtered to narrow next search request  # noqa: E501

        :param manufacturers: The manufacturers of this FilterOptions.  # noqa: E501
        :type: list[BaseFilterV4]
        """

        self._manufacturers = manufacturers

    @property
    def packaging(self):
        """Gets the packaging of this FilterOptions.  # noqa: E501

        Packaging that can be filtered to narrow next search request  # noqa: E501

        :return: The packaging of this FilterOptions.  # noqa: E501
        :rtype: list[BaseFilterV4]
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this FilterOptions.

        Packaging that can be filtered to narrow next search request  # noqa: E501

        :param packaging: The packaging of this FilterOptions.  # noqa: E501
        :type: list[BaseFilterV4]
        """

        self._packaging = packaging

    @property
    def status(self):
        """Gets the status of this FilterOptions.  # noqa: E501

        Status that can be filtered to narrow next search request  # noqa: E501

        :return: The status of this FilterOptions.  # noqa: E501
        :rtype: list[BaseFilterV4]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FilterOptions.

        Status that can be filtered to narrow next search request  # noqa: E501

        :param status: The status of this FilterOptions.  # noqa: E501
        :type: list[BaseFilterV4]
        """

        self._status = status

    @property
    def series(self):
        """Gets the series of this FilterOptions.  # noqa: E501

        Series that can be filtered to narrow next search request  # noqa: E501

        :return: The series of this FilterOptions.  # noqa: E501
        :rtype: list[BaseFilterV4]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this FilterOptions.

        Series that can be filtered to narrow next search request  # noqa: E501

        :param series: The series of this FilterOptions.  # noqa: E501
        :type: list[BaseFilterV4]
        """

        self._series = series

    @property
    def parametric_filters(self):
        """Gets the parametric_filters of this FilterOptions.  # noqa: E501

        ParaetricFilter that can be filtered to narrow next search request  # noqa: E501

        :return: The parametric_filters of this FilterOptions.  # noqa: E501
        :rtype: list[ParameterFilterOptionsResponse]
        """
        return self._parametric_filters

    @parametric_filters.setter
    def parametric_filters(self, parametric_filters):
        """Sets the parametric_filters of this FilterOptions.

        ParaetricFilter that can be filtered to narrow next search request  # noqa: E501

        :param parametric_filters: The parametric_filters of this FilterOptions.  # noqa: E501
        :type: list[ParameterFilterOptionsResponse]
        """

        self._parametric_filters = parametric_filters

    @property
    def top_categories(self):
        """Gets the top_categories of this FilterOptions.  # noqa: E501

        the top Categories to filter  # noqa: E501

        :return: The top_categories of this FilterOptions.  # noqa: E501
        :rtype: list[TopCategory]
        """
        return self._top_categories

    @top_categories.setter
    def top_categories(self, top_categories):
        """Sets the top_categories of this FilterOptions.

        the top Categories to filter  # noqa: E501

        :param top_categories: The top_categories of this FilterOptions.  # noqa: E501
        :type: list[TopCategory]
        """

        self._top_categories = top_categories

    @property
    def market_place_filters(self):
        """Gets the market_place_filters of this FilterOptions.  # noqa: E501

        Marketplace Filter  # noqa: E501

        :return: The market_place_filters of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._market_place_filters

    @market_place_filters.setter
    def market_place_filters(self, market_place_filters):
        """Sets the market_place_filters of this FilterOptions.

        Marketplace Filter  # noqa: E501

        :param market_place_filters: The market_place_filters of this FilterOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NoFilter", "ExcludeMarketPlace", "MarketPlaceOnly"]  # noqa: E501
        if not set(market_place_filters).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `market_place_filters` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(market_place_filters) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._market_place_filters = market_place_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
